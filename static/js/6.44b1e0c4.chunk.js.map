{"version":3,"sources":["utils/latinise.ts","components/Select/Select.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","hooks/useDelayedUnmount.ts","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/SearchInput.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["Latinise","latin_map","τ","Τ","latinise","input","replace","x","DropDownHeader","styled","div","theme","shadows","inset","colors","inputSecondary","DropDownListContainer","zIndices","dropdown","mediaQueries","sm","DropDownContainer","width","props","isOpen","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","Select","options","onChange","containerRef","useRef","dropdownRef","useState","setIsOpen","selectedOption","setSelectedOption","height","containerSize","setContainerSize","toggling","onOptionClicked","option","useEffect","current","offsetWidth","offsetHeight","ref","onClick","label","color","map","Wrapper","primary","ExpandableSectionButton","expanded","t","useTranslation","aria-label","role","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","chainId","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","liquidity","justifyContent","href","name","CoreTag","variant","outline","startIcon","mr","CommunityTag","DualTag","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","flexDirection","split","StyledSpacer","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","child","i","StyledTokenInput","isWarning","warning","text","StyledInput","Input","xs","StyledErrorMessage","Text","ModalInput","max","symbol","onSelectMax","value","inputTitle","isBalanceZero","style","position","pl","fontSize","balance","balanceNumber","Number","toLocaleString","undefined","maximumFractionDigits","displayBalance","pattern","inputMode","step","min","placeholder","scale","external","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","BigNumber","fullBalanceNumber","handleChange","useCallback","e","currentTarget","validity","valid","handleSelectMax","title","disabled","isFinite","eq","gt","a","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","location","useLocation","useModal","onPresentDeposit","onPresentWithdraw","mt","some","item","pathname","includes","HarvestAction","earnings","nextHarvest","account","useWeb3React","onReward","useHarvest","rawEarningsBalance","getBalanceNumber","now","Math","round","Date","secondsRemaining","parseInt","canHarvest","minutesRemaining","ceil","lockupString","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","lpContract","getBep20Contract","onApprove","useApprove","handleApprove","console","error","cakePrice","usePriceCakeBusd","earningsBusd","multipliedBy","toNumber","toFixed","BIG_NUMBER","pow","stakingBalance0","toString","stakingBalance","parseFloat","textTransform","pr","UnlockButton","ApyButton","apr","ApyCalculatorModal","linkLabel","tokenPrice","linkHref","onPresentApyModal","event","stopPropagation","ml","AccentGradient","keyframes","StyledCardAccent","FCard","card","background","PaddingWrapper","Divider","ExpandingWrapper","HarvestLockupRow","Col1","Col2","ReferenceElement","FarmCard","showExpandableSection","setShowExpandableSection","toLocaleLowerCase","earnLabel","dual","farmAPR","liquidityUrlPathParts","quoteToken","address","token","BASE_ADD_LIQUIDITY_URL","process","isPromotedFarm","useTooltip","placement","tooltipOffset","targetRef","tooltipVisible","isCommunity","display","harvestLockup","CardActionsContainer","infoAddress","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","LiquidityWrapper","Liquidity","isNaN","displayLiquidity","ActionContainer","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","earningsBigNumber","isZero","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","stakedBalanceNumber","marginBottom","marginTop","expandAnimation","collapseAnimation","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","borderColor","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","InputWrapper","SearchInput","onChangeCallback","setToggled","searchText","setSearchText","debouncedOnChange","debounce","target","onBlur","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","setViewMode","sortOption","setSortOption","prices","useGetApiPrices","dispatch","useAppDispatch","fastRefresh","useRefresh","fetchFarmUserDataAsync","isArchived","isInactive","stakedOnly","setStakedOnly","setLoadArchivedFarmsData","fetchFarmsPublicDataAsync","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceUsd","totalLiquidity","times","getFarmApr","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","PageHeader","Page","checked","marginLeft","sort","b","exact","renderContent"],"mappings":"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","file":"static/js/6.44b1e0c4.chunk.js","sourcesContent":["export const Latinise = {\n  latin_map: {\n    τ: \"t\",\n    Τ: \"T\",\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import React, { useState, useRef, useEffect } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { ArrowDropDownIcon, Text } from \"@plasmaswap/uikit\";\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownListContainer = styled.div`\n  min-width: 136px;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.input};\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  opacity: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n`\n\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\n  cursor: pointer;\n  width: ${({ width }) => width}px;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      ${DropDownHeader} {\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n        border-radius: 16px 16px 0 0;\n      }\n\n      ${DropDownListContainer} {\n        height: auto;\n        transform: scaleY(1);\n        opacity: 1;\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        border-top-width: 0;\n        border-radius: 0 0 16px 16px;\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n      }\n    `}\n\n  svg {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nconst DropDownList = styled.ul`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n`\n\nconst ListItem = styled.li`\n  list-style: none;\n  padding: 8px 16px;\n  &:hover {\n    background: ${({ theme }) => theme.colors.inputSecondary};\n  }\n`\n\nexport interface SelectProps {\n  options: OptionProps[]\n  onChange?: (option: OptionProps) => void\n}\n\nexport interface OptionProps {\n  label: string\n  value: any\n}\n\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\n  const containerRef = useRef(null)\n  const dropdownRef = useRef(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedOption, setSelectedOption] = useState(options[0])\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\n\n  const toggling = () => setIsOpen(!isOpen)\n\n  const onOptionClicked = (option: OptionProps) => () => {\n    setSelectedOption(option)\n    setIsOpen(false)\n\n    if (onChange) {\n      onChange(option)\n    }\n  }\n\n  useEffect(() => {\n    setContainerSize({\n      width: dropdownRef.current.offsetWidth, // Consider border\n      height: dropdownRef.current.offsetHeight,\n    })\n  }, [])\n\n  return (\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\n      {containerSize.width !== 0 && (\n        <DropDownHeader onClick={toggling}>\n          <Text>{selectedOption.label}</Text>\n        </DropDownHeader>\n      )}\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\n      <DropDownListContainer>\n        <DropDownList ref={dropdownRef}>\n          {options.map((option) =>\n            option.label !== selectedOption.label ? (\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\n                <Text>{option.label}</Text>\n              </ListItem>\n            ) : null,\n          )}\n        </DropDownList>\n      </DropDownListContainer>\n    </DropDownContainer>\n  )\n}\n\nexport default Select\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ChevronDownIcon, ChevronUpIcon, Text } from \"@plasmaswap/uikit\";\nimport { useTranslation } from \"contexts/Localization\";\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`;\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t(\"Hide\") : t(\"Details\")}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n};\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n};\n\nexport default ExpandableSectionButton;\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  translationId: number\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    translationId: 999,\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    translationId: 999,\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the \"Add Liquidity\" URL\n// Each part of the url represents a different side of the LP pair\nimport { getWbnbAddress } from \"./addressHelpers\";\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID;\n  const wBNBAddressString = getWbnbAddress();\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null;\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null;\n  const firstPart = !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? \"BNB\" : quoteTokenAddressString;\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? \"BNB\" : tokenAddressString;\n  return `${firstPart}/${secondPart}`;\n}\n\nexport default getLiquidityUrlPathParts;\n","import React from \"react\";\nimport { useTranslation } from \"contexts/Localization\";\nimport styled from \"styled-components\";\nimport { Text, Flex, LinkExternal } from \"@plasmaswap/uikit\";\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`;\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`;\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation();\n  const liquidity = (totalValueFormatted === \"$NaN\" ? \"$0\" : totalValueFormatted);\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>Total Liquidity:</Text>\n        <Text>{liquidity}</Text>\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t(`Get ${lpLabel}`, { name: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>View Contract</StyledLinkExternal>\n    </Wrapper>\n  );\n};\n\nexport default DetailsSection;\n","import React from \"react\";\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon } from \"@plasmaswap/uikit\";\n\nconst CoreTag = (props) => (\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = (props) => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = (props) => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n    Binance\n  </Tag>\n)\n\nconst DualTag = (props) => (\n  <Tag variant=\"textSubtle\" outline {...props}>\n    Dual\n  </Tag>\n)\n\nconst ManualPoolTag = (props) => (\n  <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props} />\n)\n\nconst CompoundingPoolTag = (props) => (\n  <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n    Auto\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@plasmaswap/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n  color: black;\n  font-weight: bold;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React, { useContext } from \"react\";\nimport styled, { ThemeContext } from \"styled-components\";\n\ninterface SpacerProps {\n  size?: \"sm\" | \"md\" | \"lg\"\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = \"md\" }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case \"lg\":\n      s = spacing[6]\n      break\n    case \"sm\":\n      s = spacing[2]\n      break\n    case \"md\":\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Spacer from \"../Spacer\";\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  );\n};\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`;\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`;\n\nexport default ModalActions;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Text, Button, Input, InputProps, Flex, Link } from \"@plasmaswap/uikit\";\nimport { useTranslation } from \"contexts/Localization\";\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === \"0\" || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return \"0\"\n    }\n    const balanceNumber = Number(balance)\n    if (balanceNumber > 0 && balanceNumber < 0.0001) {\n      return balanceNumber.toLocaleString(undefined, { maximumFractionDigits: 20 })\n    }\n    return balanceNumber.toLocaleString()\n  }\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">\n            {t(\"Balance\")}: {displayBalance(max)}\n          </Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t(\"Max\")}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          No tokens to stake:{\" \"}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t(\"get\")} {symbol}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from \"bignumber.js\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport { Button, Modal, LinkExternal } from \"@plasmaswap/uikit\";\nimport ModalActions from \"components/ModalActions\";\nimport ModalInput from \"components/ModalInput\";\nimport { getFullDisplayBalance } from \"utils/formatBalance\";\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = \"\", addLiquidityUrl }) => {\n  const [val, setVal] = useState(\"\")\n  const [pendingTx, setPendingTx] = useState(false)\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, \".\"))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title=\"Stake LP tokens\" onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle=\"Stake\"\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          Cancel\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? \"Pending Confirmation\" : \"Confirm\"}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: \"center\" }}>\n        Get {tokenName}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@plasmaswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          Cancel\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport BigNumber from \"bignumber.js\";\nimport { Button, Flex, IconButton, AddIcon, MinusIcon, useModal } from \"@plasmaswap/uikit\";\nimport { useLocation } from \"react-router-dom\";\nimport useStake from \"hooks/useStake\";\nimport useUnstake from \"hooks/useUnstake\";\nimport DepositModal from \"../DepositModal\";\nimport WithdrawModal from \"../WithdrawModal\";\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`;\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const { onStake } = useStake(pid);\n  const { onUnstake } = useUnstake(pid);\n  const location = useLocation();\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  );\n\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  );\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        width=\"100%\"\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        Stake LP\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex mt=\"8px\" justifyContent=\"center\" alignItems=\"center\">\n      {renderStakingButtons()}\n    </Flex>\n  );\n};\n\nexport default StakeAction;\n","import React, { useState } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport { Button, Flex } from \"@plasmaswap/uikit\";\nimport { useHarvest } from \"hooks/useHarvest\";\nimport { getBalanceNumber } from \"utils/formatBalance\";\nimport { useWeb3React } from \"@web3-react/core\";\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n  nextHarvest?: string|number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid, nextHarvest }) => {\n  const { account } = useWeb3React();\n  const [pendingTx, setPendingTx] = useState(false);\n  const { onReward } = useHarvest(pid);\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0;\n  const now = Math.round(Date.now() / 1000) - 30;\n  const secondsRemaining = parseInt(nextHarvest as string) - now;\n  const canHarvest = (secondsRemaining <= 0);\n  const minutesRemaining = ((Math.ceil(secondsRemaining / 60) > 119) ? 119 : Math.ceil(secondsRemaining / 60));\n  const lockupString = `Lockup: ${minutesRemaining} min${(minutesRemaining > 1) ? \"s\" : \"\"}`;\n\n  return (\n    <Flex mt=\"8px\" mb=\"8px\" justifyContent=\"center\" alignItems=\"center\">\n      <Button\n        width=\"100%\"\n        disabled={rawEarningsBalance === 0 || pendingTx || !canHarvest}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          setPendingTx(false)\n        }}\n      >\n        {canHarvest ? \"Harvest\" : lockupString}\n      </Button>\n    </Flex>\n  );\n};\n\nexport default HarvestAction;\n","import React, { useState, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport { provider as ProviderType } from \"web3-core\";\nimport BigNumber from \"bignumber.js\";\nimport { getAddress } from \"utils/addressHelpers\";\nimport { getBep20Contract } from \"utils/contractHelpers\";\nimport { Button, Flex, Text } from \"@plasmaswap/uikit\";\nimport { Farm } from \"state/types\";\nimport useWeb3 from \"hooks/useWeb3\";\nimport { useApprove } from \"hooks/useApprove\";\nimport UnlockButton from \"components/UnlockButton\";\nimport { getBalanceNumber } from \"utils/formatBalance\";\nimport { usePriceCakeBusd } from \"state/hooks\";\nimport StakeAction from \"./StakeAction\";\nimport HarvestAction from \"./HarvestAction\";\n\nconst Action = styled.div`\n  padding-top: 16px;\n`;\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  canHarvest?: boolean\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  provider?: ProviderType\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const { pid, lpAddresses } = farm;\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n    nextHarvest = 0\n  } = farm.userData || {};\n  const allowance = new BigNumber(allowanceAsString);\n  const tokenBalance = new BigNumber(tokenBalanceAsString);\n  const stakedBalance = new BigNumber(stakedBalanceAsString);\n  const earnings = new BigNumber(earningsAsString);\n  const lpAddress = getAddress(lpAddresses);\n  const lpName = farm.lpSymbol.toUpperCase();\n  const isApproved = account && allowance && allowance.isGreaterThan(0);\n  const web3 = useWeb3();\n  const lpContract = getBep20Contract(lpAddress, web3);\n  const { onApprove } = useApprove(lpContract);\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove]);\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        Approve Contract\n      </Button>\n    );\n  };\n\n  const cakePrice = usePriceCakeBusd();\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0;\n  const displayBalance = rawEarningsBalance.toLocaleString();\n  const earningsBusd = rawEarningsBalance ? new BigNumber(rawEarningsBalance).multipliedBy(cakePrice).toNumber().toFixed(3) : 0;\n  const BIG_NUMBER = new BigNumber(10).pow(18);\n  const stakingBalance0 = stakedBalance.div(BIG_NUMBER).toString();\n  const stakingBalance = +parseFloat(stakingBalance0).toFixed(3);\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"16px\" pr=\"3px\">\n          PLASMA\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"16px\">\n          Earned:&nbsp;\n        </Text>\n        <Text>{displayBalance}</Text>\n      </Flex>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"16px\">\n          ~${earningsBusd}\n        </Text>\n      </Flex>\n\n      <HarvestAction earnings={earnings} pid={pid} nextHarvest={nextHarvest} />\n\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"16px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"16px\">\n          Staked:&nbsp;\n        </Text>\n        <Text>{stakingBalance}</Text>\n      </Flex>\n\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  );\n};\n\nexport default CardActions;\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@plasmaswap/uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apr?: number\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      linkLabel={`${t('Get')} ${lpLabel}`}\n      tokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      linkHref={addLiquidityUrl}\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport styled, { keyframes } from \"styled-components\";\nimport { Flex, Text, Skeleton, HelpIcon, useTooltip } from \"@plasmaswap/uikit\";\nimport { Farm } from \"state/types\";\nimport { provider as ProviderType } from \"web3-core\";\nimport ExpandableSectionButton from \"components/ExpandableSectionButton\";\nimport { BASE_ADD_LIQUIDITY_URL } from \"config\";\nimport getLiquidityUrlPathParts from \"utils/getLiquidityUrlPathParts\";\nimport DetailsSection from \"./DetailsSection\";\nimport CardHeading from \"./CardHeading\";\nimport CardActionsContainer from \"./CardActionsContainer\";\nimport ApyButton from \"./ApyButton\";\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  liquidity?: BigNumber\n  canHarvest?: boolean\n}\n\nconst AccentGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`;\n\nconst StyledCardAccent = styled.div`\n  background-size: 400% 400%;\n  animation: ${AccentGradient} 2s linear infinite;\n  border-radius: 8px;\n  position: absolute;\n  top: -1px;\n  right: -1px;\n  bottom: -3px;\n  left: -1px;\n  z-index: -1;\n`;\n\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 8px;\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px 0;\n  position: relative;\n  text-align: center;\n  border: 1px solid #65f5f7;\n`;\n\nconst PaddingWrapper = styled.div`\n  padding: 0 24px;\n`;\n\nconst Divider = styled.div`\n  background-color: #65f5f7;\n  height: 1px;\n  margin: 28px 0;\n  width: 100%;\n`;\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? \"100%\" : \"0px\")};\n  overflow: hidden;\n`;\n\nconst HarvestLockupRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  color: #FFFFFC;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 1.5;\n`;\n\nconst Col1 = styled.div`\n  display: flex;\n\n  div {\n    display: flex;\n  }\n`;\n\nconst Col2 = styled.div`\n  display: flex;\n`;\n\nconst ReferenceElement = styled.div`\n  display: flex;\n`;\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  provider?: ProviderType\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n  const farmImage = farm.lpSymbol.split(\" \")[0].toLocaleLowerCase()\n  const totalValueFormatted = farm.liquidity\n    ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : \"-\"\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace(\"PANCAKE\", \"\")\n  const earnLabel = farm.dual ? farm.dual.earnLabel : \"PLASMA\"\n  const farmAPR = farm.apr && farm.apr.toLocaleString(\"en-US\", { maximumFractionDigits: 2 })\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const isPromotedFarm = farm.token.symbol === \"PLASMA\"\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    \"How long you must wait until you are able to harvest again\",\n    { placement: \"top\", tooltipOffset: [0, 10] },\n  )\n\n  return (\n    <FCard isPromotedFarm={isPromotedFarm}>\n      <PaddingWrapper>\n        {isPromotedFarm && <StyledCardAccent />}\n\n        <CardHeading\n          lpLabel={lpLabel}\n          multiplier={farm.multiplier}\n          isCommunityFarm={farm.isCommunity}\n          farmImage={farmImage}\n          tokenSymbol={farm.token.symbol}\n        />\n\n        {!removed && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text>APR:</Text>\n            <Text bold style={{ display: \"flex\", alignItems: \"center\" }}>\n              {farm.apr ? (\n                <>\n                  <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\n                  {farmAPR}%\n                </>\n              ) : (\n                <Skeleton height={24} width={80} />\n              )}\n            </Text>\n          </Flex>\n        )}\n\n        <Flex justifyContent=\"space-between\">\n          <HarvestLockupRow>\n            <Col1>\n              Harvest Lockup:\n            </Col1>\n            <Col2>\n              <ReferenceElement ref={targetRef}>\n                <HelpIcon color=\"textSubtle\" />\n              </ReferenceElement>\n              {tooltipVisible && tooltip}\n              {farm.harvestLockup}\n            </Col2>\n          </HarvestLockupRow>\n        </Flex>\n\n        <Flex justifyContent=\"space-between\">\n          <Text>Earn:</Text>\n          <Text>{earnLabel}</Text>\n        </Flex>\n\n        <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n      </PaddingWrapper>\n\n      <Divider />\n\n      <PaddingWrapper>\n        <ExpandableSectionButton\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\n          expanded={showExpandableSection}\n        />\n\n        <ExpandingWrapper expanded={showExpandableSection}>\n          <DetailsSection\n            removed={removed}\n            bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\n            infoAddress={`https://plasmaswap.info/pair/${lpAddress}`}\n            totalValueFormatted={totalValueFormatted}\n            lpLabel={lpLabel}\n            addLiquidityUrl={addLiquidityUrl}\n          />\n        </ExpandingWrapper>\n      </PaddingWrapper>\n    </FCard>\n  );\n};\n\nexport default FarmCard;\n","import { useState, useEffect } from \"react\";\n\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>\n    if (isMounted && !shouldRender) {\n      setShouldRender(true)\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\n    }\n    return () => clearTimeout(timeoutId)\n  }, [isMounted, delayTime, shouldRender])\n  return shouldRender\n}\n\nexport default useDelayedUnmount\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@plasmaswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text, Image } from '@plasmaswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  image: string\n}\n\nconst IconImage = styled(Image)`\n  width: 24px;\n  height: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n    height: 40px;\n  }\n`\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          {t('FARMING')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <IconImage src={`/images/farms/${image}.png`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Skeleton } from \"@plasmaswap/uikit\";\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`;\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={1}>{earnings.toLocaleString()}</Amount>\n  }\n\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  );\n}\n\nexport default Earned;\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@plasmaswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, useTooltip } from '@plasmaswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <div>\n      {t('The multiplier represents the amount of PLASMA rewards each farm gets.')}\n      <br />\n      <br />\n      {t('For example, if a 1x farm was getting 1 PLASMA per block, a 40x farm would be getting 40 PLASMA per block.')}\n    </div>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Text, Skeleton } from \"@plasmaswap/uikit\";\nimport BigNumber from \"bignumber.js\";\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`;\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  let l: BigNumber;\n\n  if (liquidity) {\n    if (Number.isNaN(liquidity.toNumber())) {\n      l = new BigNumber(0);\n    } else {\n      l = liquidity;\n    }\n  }\n\n  const displayLiquidity = liquidity ? (\n    `$${Number(l).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n  ) : (\n    <Skeleton width={60} />\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from \"styled-components\";\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`;\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n  margin-bottom: 8px;\n`;\n\nexport const Title = styled.span`\n  color: ${({ theme }) => theme.colors.secondary};\n`;\n\nexport const Subtle = styled.span`\n  color: ${({ theme }) => theme.colors.textSubtle};\n`;\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`;\n\nexport const Staked = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { Button, Skeleton } from \"@plasmaswap/uikit\";\nimport BigNumber from \"bignumber.js\";\nimport { FarmWithStakedValue } from \"views/Farms/components/FarmCard/FarmCard\";\nimport { getBalanceNumber } from \"utils/formatBalance\";\nimport { useHarvest } from \"hooks/useHarvest\";\nimport { usePriceCakeBusd } from \"state/hooks\";\nimport { useCountUp } from \"react-countup\";\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from \"./styles\";\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean,\n  nextHarvest: string|number\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, nextHarvest, userDataReady }) => {\n  const earningsBigNumber = new BigNumber(userData.earnings);\n  const cakePrice = usePriceCakeBusd();\n  let earnings = 0;\n  let earningsBusd = 0;\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />;\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceNumber(earningsBigNumber)\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toLocaleString()\n  }\n\n  const [pendingTx, setPendingTx] = useState(false);\n  const { onReward } = useHarvest(pid);\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: \",\",\n    decimals: 3,\n  });\n  const updateValue = useRef(update);\n\n  useEffect(() => {\n    updateValue.current(earningsBusd)\n  }, [earningsBusd, updateValue]);\n\n  const now = Math.round(Date.now() / 1000) - 30;\n  const secondsRemaining = parseInt(nextHarvest as string) - now;\n  const canHarvest = (secondsRemaining <= 0);\n  const minutesRemaining = ((Math.ceil(secondsRemaining / 60) > 119) ? 119 : Math.ceil(secondsRemaining / 60));\n  const lockupString = `Lockup: ${minutesRemaining} min${(minutesRemaining > 1) ? \"s\" : \"\"}`;\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Title>PLASMA </Title>\n        <Subtle>EARNED</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          <Staked>~{countUp} USD</Staked>\n        </div>\n\n        <Button\n          disabled={!earnings || pendingTx || !userDataReady || !canHarvest}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n          ml=\"4px\"\n        >\n          {canHarvest ? \"Harvest\" : lockupString}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  );\n};\n\nexport default HarvestAction;\n","import React, { useState, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton } from \"@plasmaswap/uikit\";\nimport { useLocation } from \"react-router-dom\";\nimport UnlockButton from \"components/UnlockButton\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useFarmUser } from \"state/hooks\";\nimport { FarmWithStakedValue } from \"views/Farms/components/FarmCard/FarmCard\";\nimport { useTranslation } from \"contexts/Localization\";\nimport { useApprove } from \"hooks/useApprove\";\nimport { getBep20Contract } from \"utils/contractHelpers\";\nimport { BASE_ADD_LIQUIDITY_URL } from \"config\";\nimport getLiquidityUrlPathParts from \"utils/getLiquidityUrlPathParts\";\nimport { getBalanceNumber, getFullDisplayBalance } from \"utils/formatBalance\";\nimport useStake from \"hooks/useStake\";\nimport useUnstake from \"hooks/useUnstake\";\nimport useWeb3 from \"hooks/useWeb3\";\nimport DepositModal from \"../../DepositModal\";\nimport WithdrawModal from \"../../WithdrawModal\";\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from \"./styles\";\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const web3 = useWeb3()\n  const location = useLocation()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const displayBalance = useCallback(() => {\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceNumber.toLocaleString()\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\n  const lpContract = getBep20Contract(lpAddress, web3)\n  const { onApprove } = useApprove(lpContract)\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{t(\"START FARMING\")}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Title>{lpSymbol} </Title>\n            <Subtle>STAKED</Subtle>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance()}</Earned>\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={[\"history\", \"archived\"].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>STAKE </Subtle>\n          <Title>{lpSymbol}</Title>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={[\"history\", \"archived\"].some((item) => location.pathname.includes(item))}\n          >\n            Stake LP\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>START FARMING</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Subtle>ENABLE FARM</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          Enable\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","/* eslint-disable prefer-destructuring */\nimport React from \"react\";\nimport styled, { keyframes, css } from \"styled-components\";\nimport { useTranslation } from \"contexts/Localization\";\nimport { LinkExternal, Text, HelpIcon, useTooltip } from \"@plasmaswap/uikit\";\nimport { FarmWithStakedValue } from \"views/Farms/components/FarmCard/FarmCard\";\nimport getLiquidityUrlPathParts from \"utils/getLiquidityUrlPathParts\";\nimport { CommunityTag, CoreTag, DualTag } from \"components/Tags\";\nimport HarvestAction from \"./HarvestAction\";\nimport StakedAction from \"./StakedAction\";\nimport Apr, { AprProps } from \"../Apr\";\nimport Multiplier, { MultiplierProps } from \"../Multiplier\";\nimport Liquidity, { LiquidityProps } from \"../Liquidity\";\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`;\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`;\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`;\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`;\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`;\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 4px;\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`;\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`;\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`;\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`;\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`;\n\nconst HarvestLockupRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  color: #FFFFFC;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 1.5;\n`;\n\nconst Col1 = styled.div`\n  display: flex;\n\n  div {\n    display: flex;\n  }\n`;\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`;\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n  const { t } = useTranslation();\n  const isActive = farm.multiplier !== \"0X\";\n  const { quoteToken, token, dual } = farm;\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase();\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  });\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID];\n  const bsc = `https://bscscan.com/address/${lpAddress}`;\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    \"How long you must wait until you are able to harvest again\",\n    { placement: \"top\", tooltipOffset: [0, 10] },\n  );\n\n  let nextHarvest: number|string = -1;\n  if (\"userData\" in farm && \"nextHarvest\" in farm.userData) {\n    nextHarvest = farm.userData.nextHarvest;\n  }\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`https://papersolution.github.io/#/add/${liquidityUrlPathParts}`}>\n              {t(`Get ${lpLabel}`, { name: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>View Contract</StyledLinkExternal>\n\n        <HarvestLockupRow>\n          <Col1>\n            Harvest Lockup: {farm.harvestLockup}\n            <ReferenceElement ref={targetRef}>\n              <HelpIcon color=\"textSubtle\" />\n            </ReferenceElement>\n            {tooltipVisible && tooltip}\n          </Col1>\n        </HarvestLockupRow>\n\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>APR</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>Multiplier</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>Liquidity</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} nextHarvest={nextHarvest} />\n        <StakedAction {...farm} userDataReady={userDataReady} />\n      </ActionContainer>\n    </Container>\n  );\n};\n\nexport default ActionPanel;\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { FarmWithStakedValue } from \"views/Farms/components/FarmCard/FarmCard\";\nimport { useMatchBreakpoints } from \"@plasmaswap/uikit\";\nimport { useTranslation } from \"contexts/Localization\";\nimport useDelayedUnmount from \"hooks/useDelayedUnmount\";\nimport { useFarmUser } from \"state/hooks\";\nimport Apr, { AprProps } from \"./Apr\";\nimport Farm, { FarmProps } from \"./Farm\";\nimport Earned, { EarnedProps } from \"./Earned\";\nimport Details from \"./Details\";\nimport Multiplier, { MultiplierProps } from \"./Multiplier\";\nimport Liquidity, { LiquidityProps } from \"./Liquidity\";\nimport ActionPanel from \"./Actions/ActionPanel\";\nimport CellLayout from \"./CellLayout\";\nimport { DesktopColumnSchema, MobileColumnSchema } from \"../types\";\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n};\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`;\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n`;\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`;\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`;\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`;\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props;\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber();\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount);\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300);\n  const { t } = useTranslation();\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  };\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount]);\n\n  const { isXl, isXs } = useMatchBreakpoints();\n  const isMobile = !isXl;\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema;\n  const columnNames = tableSchema.map((column) => column.name);\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case \"details\":\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case \"apr\":\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label=\"APR\">\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label=\"Earned\">\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label=\"APR\">\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n};\n\nexport default Row;\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@plasmaswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@plasmaswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React, { useState, useMemo } from 'react'\nimport { Input } from '@plasmaswap/uikit'\nimport styled from 'styled-components'\nimport debounce from 'lodash/debounce'\n\nconst StyledInput = styled(Input)`\n  border-radius: 16px;\n  margin-left: auto;\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 234px;\n    display: block;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback }) => {\n  const [toggled, setToggled] = useState(false)\n  const [searchText, setSearchText] = useState('')\n\n  const debouncedOnChange = useMemo(\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\n    [onChangeCallback],\n  )\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value)\n    debouncedOnChange(e)\n  }\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput\n          value={searchText}\n          onChange={onChange}\n          placeholder=\"Search farms\"\n          onBlur={() => setToggled(false)}\n        />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@plasmaswap/uikit'\nimport { ViewMode } from '../types'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from \"react\";\nimport { Route, useRouteMatch, useLocation } from \"react-router-dom\";\nimport { useAppDispatch } from \"state\";\nimport BigNumber from \"bignumber.js\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Heading, RowType, Toggle, Text } from \"@plasmaswap/uikit\";\nimport styled from \"styled-components\";\nimport FlexLayout from \"components/layout/Flex\";\nimport Page from \"components/layout/Page\";\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from \"state/hooks\";\nimport useRefresh from \"hooks/useRefresh\";\nimport { fetchFarmUserDataAsync } from \"state/actions\";\nimport usePersistState from \"hooks/usePersistState\";\nimport { Farm } from \"state/types\";\nimport { getBalanceNumber } from \"utils/formatBalance\";\nimport { getFarmApr } from \"utils/apr\";\nimport { orderBy } from \"lodash\";\nimport { getAddress } from \"utils/addressHelpers\";\nimport isArchivedPid from \"utils/farmHelpers\";\nimport { latinise } from \"utils/latinise\";\nimport PageHeader from \"components/PageHeader\";\nimport { fetchFarmsPublicDataAsync, setLoadArchivedFarmsData } from \"state/farms\";\nimport Select, { OptionProps } from \"components/Select/Select\";\nimport FarmCard, { FarmWithStakedValue } from \"./components/FarmCard/FarmCard\";\nimport Table from \"./components/FarmTable/FarmTable\";\nimport FarmTabButtons from \"./components/FarmTabButtons\";\nimport SearchInput from \"./components/SearchInput\";\nimport { RowProps } from \"./components/FarmTable/Row\";\nimport ToggleView from \"./components/ToggleView/ToggleView\";\nimport { DesktopColumnSchema, ViewMode } from \"./components/types\";\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState(\"\")\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, \"pancake_farm_view\")\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState(\"hot\")\n  const prices = useGetApiPrices()\n\n  const dispatch = useAppDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const isArchived = pathname.includes(\"archived\")\n  const isInactive = pathname.includes(\"history\")\n  const isActive = !isInactive && !isArchived\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n\n  useEffect(() => {\n    // Makes the main scheduled fetching to request archived farms data\n    dispatch(setLoadArchivedFarmsData(isArchived))\n\n    // Immediately request data for archived farms so users don't have to wait\n    // 60 seconds for public data and 10 seconds for user data\n    const address = account || \"0x0000000000000000000000000000000000000000\";\n\n    if (isArchived) {\n      dispatch(fetchFarmsPublicDataAsync(address))\n      if (account) {\n        dispatch(fetchFarmUserDataAsync(account))\n      }\n    }\n  }, [isArchived, dispatch, account])\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== \"0X\" && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === \"0X\" && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !prices) {\n          return farm\n        }\n\n        const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n        const apr = isActive ? getFarmApr(farm.poolWeight, cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, prices, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case \"apr\":\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, \"desc\")\n        case \"multiplier\":\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            \"desc\",\n          )\n        case \"earned\":\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            \"desc\",\n          )\n        case \"liquidity\":\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), \"desc\")\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: \"0px\",\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const rowData = farmsStakedMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(\" \")[0].toUpperCase();\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apr && farm.apr.toLocaleString(\"en-US\", { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        image: farm.lpSymbol.split(\" \")[0].toLocaleLowerCase(),\n        label: lpLabel,\n        pid: farm.pid,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case \"farm\":\n              return b.id - a.id\n            case \"apr\":\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case \"earned\":\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n          <Route exact path={`${path}/archived`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          Farms\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          Stake your Liquidity Pool tokens to passively earn PLASMA\n          {/* <br /><br />\n          Liquidity for PLASMA-BNB and PLASMA-BUSD will be added by the devs approximately 10 minutes before block #8,620,000 */}\n        </Heading>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text>Staked only</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text>SORT BY</Text>\n              <Select\n                options={[\n                  {\n                    label: \"Hot\",\n                    value: \"hot\",\n                  },\n                  {\n                    label: \"APR\",\n                    value: \"apr\",\n                  },\n                  {\n                    label: \"Multiplier\",\n                    value: \"multiplier\",\n                  },\n                  {\n                    label: \"Earned\",\n                    value: \"earned\",\n                  },\n                  {\n                    label: \"Liquidity\",\n                    value: \"liquidity\",\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text>SEARCH</Text>\n              <SearchInput onChange={handleChangeQuery} />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        <div ref={loadMoreRef} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}