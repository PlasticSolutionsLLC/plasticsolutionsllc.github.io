{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","views/Home/components/CakeHarvestBalance.tsx","hooks/useTokenBalance.ts","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/Announcements.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/EarnAPRCard.tsx","views/Home/Home.tsx"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","callsFarms","filter","obj","callsPools","poolsConfig","pool","sousId","resultFarms","resultPools","concat","fetchAllBalances","CardValue","value","decimals","fontSize","lineHeight","prefix","suffix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","style","textAlign","CardBusdValue","props","Block","styled","div","CakeHarvestBalance","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","useTokenBalance","tokenAddress","BIG_ZERO","web3","useWeb3","contract","getBep20Contract","methods","balanceOf","call","res","fetchBalance","CakeWalletBalance","cakeBalance","getCakeAddress","busdBalance","getBalanceNumber","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","t","useTranslation","farmsWithBalance","pools","usePools","farmsWithValue","balanceType","poolsWithValue","userData","pendingReward","totalWithValue","length","onRewardFarms","useAllHarvest","farmWithBalance","onRewardPools","poolWithBalance","harvestAllFarms","useCallback","Promise","all","onReward","then","error","scale","mb","src","alt","width","height","id","disabled","onClick","count","UnlockButton","StyledCakeStats","Row","BIG_NUMBER","cakePriceUsd","totalSupply","slowRefresh","setTotalSupply","cakeContract","getCakeContract","supply","fetchTotalSupply","useTotalSupply","burnedBalance","useBurnedBalance","plasmaSupply","circulatingSupply","marketCap","PPB","masterChefContract","useMasterchef","plasmaContract","useCake","data","setData","maxTransferAmount","tokensPerBlock","plasmaPerBlock","fetchData","PlasmaPerBlock","maxTransactionAmount","dividedBy","newPlasmaPerBlock","StyledAnnouncements","CakeStats","sourceType","screenName","options","noScrollbar","noHeader","noFooter","StyledTotalValueLockedCard","TotalValueLockedCard","farmsLP","useFarms","prices","useGetApiPrices","plasmaPrice","tvlBigNumber","pricesLoaded","tvlLoaded","aprs","quoteTokenPriceUsd","getAddress","quoteToken","toLowerCase","lpTotalInQuoteToken","times","i","Number","isNaN","plus","stakingTokenPriceUsd","stakingToken","divisor","pow","totalValueInPool","totalStaked","c","string","tvl","toFixed","toString","replace","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPRCard","cakePrice","highestApr","useMemo","multiplier","totalLiquidity","getFarmApr","poolWeight","maxApr","max","toLocaleString","maximumFractionDigits","exact","activeClassName","to","animation","variant","justifyContent","mt","Hero","Cards","BaseLayout","sm","OutlineBig","OutlineSmall","Countdown","CountdownRowHeader","CountdownRow","Commas","Countdown2","currentBlock","useBlock","START_BLOCK","blocksRemaining","seconds","minutes","Math","floor","hours","days","D","H","M","ETA","Home","Page","as","FarmStakingCard","Announcements"],"mappings":"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","file":"static/js/10.1ae47331.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport multicall from \"utils/multicall\";\nimport { getMasterChefAddress } from \"utils/addressHelpers\";\nimport masterChefABI from \"config/abi/masterchef.json\";\nimport { farmsConfig } from \"config/constants\";\nimport { FarmConfig } from \"config/constants/types\";\nimport useRefresh from \"./useRefresh\";\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: \"pendingTokens\",\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport multicall from \"utils/multicall\";\nimport { getMasterChefAddress } from \"utils/addressHelpers\";\nimport masterChefABI from \"config/abi/masterchef.json\";\nimport { farmsConfig, poolsConfig } from \"config/constants\";\nimport useRefresh from \"./useRefresh\";\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([]);\n  const { account } = useWeb3React();\n  const { fastRefresh } = useRefresh();\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      // Remove farm with a PID of zero (0) as that's the PLASMA-PLASMA pool and not a farm (special exception)\n      const callsFarms = farmsConfig.filter((obj) => {return obj.pid > 0;}).map((farm) => ({\n        address: getMasterChefAddress(),\n        name: \"pendingTokens\",\n        params: [farm.pid, account],\n      }));\n\n      const callsPools = poolsConfig.map((pool) => ({\n        address: getMasterChefAddress(),\n        name: \"pendingTokens\",\n        params: [pool.sousId, account],\n      }));\n\n      const resultFarms = await multicall(masterChefABI, callsFarms);\n      const resultPools = await multicall(masterChefABI, callsPools);\n      setBalance(resultFarms.concat(resultPools));\n    }\n\n    if (account) {\n      fetchAllBalances();\n    }\n  }, [account, fastRefresh]);\n\n  return balances;\n}\n\nexport default useAllEarnings;\n","/* eslint-disable no-nested-ternary */\nimport React, { useEffect, useRef } from \"react\";\nimport { useCountUp } from \"react-countup\";\nimport { Text } from \"@plasmaswap/uikit\";\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  suffix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = \"40px\",\n  lineHeight = \"1\",\n  prefix = \"\",\n  suffix = \"\",\n  bold = true,\n  color = \"text\",\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: \",\",\n    decimals: decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  });\n\n  const updateValue = useRef(update);\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue]);\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color} textAlign=\"left\">\n      {prefix}\n      {countUp}\n      {suffix}\n    </Text>\n  );\n};\n\nexport default CardValue;\n","import React from \"react\";\nimport CardValue, { CardValueProps } from \"./CardValue\";\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue\n      fontSize=\"14px\"\n      lineHeight=\"1.1\"\n      color=\"textSubtle\"\n      prefix=\"~$\"\n      bold={false}\n      decimals={2}\n      {...props} />\n  );\n};\n\nexport default CardBusdValue;\n","import React from \"react\";\nimport { Text } from \"@plasmaswap/uikit\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport BigNumber from \"bignumber.js\";\nimport useAllEarnings from \"hooks/useAllEarnings\";\nimport { usePriceCakeBusd } from \"state/hooks\";\nimport styled from \"styled-components\";\nimport { DEFAULT_TOKEN_DECIMAL } from \"config\";\nimport CardValue from \"./CardValue\";\nimport CardBusdValue from \"./CardBusdValue\";\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`;\n\nconst CakeHarvestBalance = () => {\n  const { account } = useWeb3React();\n  const allEarnings = useAllEarnings();\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    const earningNumber = new BigNumber(earning);\n    if (earningNumber.eq(0)) {\n      return accum;\n    }\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber();\n  }, 0);\n  const cakePriceBusd = usePriceCakeBusd();\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber();\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ color: \"white\", lineHeight: \"76px\" }}>\n        Locked\n      </Text>\n    );\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      {!cakePriceBusd.eq(0) && <CardBusdValue value={earningsBusd} />}\n    </Block>\n  );\n};\n\nexport default CakeHarvestBalance;\n","import { useEffect, useState } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { getBep20Contract, getCakeContract } from \"utils/contractHelpers\";\nimport { BIG_ZERO } from \"utils/bigNumber\";\nimport useWeb3 from \"./useWeb3\";\nimport useRefresh from \"./useRefresh\";\nimport useLastUpdated from \"./useLastUpdated\";\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(\"0x000000000000000000000000000000000000dEaD\").call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import React from \"react\";\nimport { Text } from \"@plasmaswap/uikit\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport useTokenBalance from \"hooks/useTokenBalance\";\nimport { getCakeAddress } from \"utils/addressHelpers\";\nimport { getBalanceNumber } from \"utils/formatBalance\";\nimport { usePriceCakeBusd } from \"state/hooks\";\nimport { BigNumber } from \"bignumber.js\";\nimport CardValue from \"./CardValue\";\nimport CardBusdValue from \"./CardBusdValue\";\n\nconst CakeWalletBalance = () => {\n  const cakeBalance = useTokenBalance(getCakeAddress());\n  const cakePriceBusd = usePriceCakeBusd();\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber();\n  const { account } = useWeb3React();\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ color: \"white\", lineHeight: \"54px\" }}>\n        Locked\n      </Text>\n    );\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      {!cakePriceBusd.eq(0) ? <CardBusdValue value={busdBalance} /> : <br />}\n    </>\n  );\n};\n\nexport default CakeWalletBalance;\n","import React, { useState, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport { Heading, Card, CardBody, Button } from \"@plasmaswap/uikit\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useTranslation } from \"contexts/Localization\";\nimport { useAllHarvest } from \"hooks/useHarvest\";\nimport useFarmsWithBalance from \"hooks/useFarmsWithBalance\";\nimport UnlockButton from \"components/UnlockButton\";\nimport { usePools } from \"state/hooks\";\nimport CakeHarvestBalance from \"./CakeHarvestBalance\";\nimport CakeWalletBalance from \"./CakeWalletBalance\";\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/token-bg.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`;\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`;\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`;\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`;\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`;\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false);\n  const { account } = useWeb3React();\n  const { t } = useTranslation();\n  const farmsWithBalance = useFarmsWithBalance();\n  const pools = usePools(account);\n  const farmsWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0);\n  const poolsWithValue = pools.filter((obj) => obj.userData.pendingReward.toNumber() > 0 && obj.sousId > 0);\n  const totalWithValue = farmsWithValue.length + poolsWithValue.length;\n  const onRewardFarms = useAllHarvest(farmsWithValue.map((farmWithBalance) => farmWithBalance.pid));\n  const onRewardPools = useAllHarvest(poolsWithValue.map((poolWithBalance) => poolWithBalance.sousId));\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      Promise.all([\n        onRewardFarms.onReward(),\n        onRewardPools.onReward()\n      ]).then(() => {\n        // N/A\n      });\n    } catch (error) { /* N/A */ } finally {\n      setPendingTx(false)\n    }\n  }, [onRewardFarms, onRewardPools]);\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          Farms & Staking\n        </Heading>\n        <CardImage src=\"/images/token-icon.png\" alt=\"PLASMA Logo\" width={64} height={64} />\n        <Block>\n          <Label>PLASMA to Harvest</Label>\n          <CakeHarvestBalance />\n        </Block>\n        <Block>\n          <Label>PLASMA in Wallet</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={totalWithValue === 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? \"Collecting PLASMA\"\n                : t(\"Harvest all (%count%)\", {\n                    count: totalWithValue,\n                  })}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  );\n};\n\nexport default FarmedStakingCard;\n","import React, { useEffect, useState } from \"react\";\nimport { Card, CardBody, Heading, Text } from \"@plasmaswap/uikit\";\nimport styled from \"styled-components\";\nimport BigNumber from \"bignumber.js\";\nimport { getBalanceNumber } from \"utils/formatBalance\";\nimport { useTotalSupply, useBurnedBalance } from \"hooks/useTokenBalance\";\nimport { getCakeAddress } from \"utils/addressHelpers\";\nimport { usePriceCakeBusd } from \"state/hooks\";\nimport { useCake,useMasterchef } from \"hooks/useContract\";\nimport CardValue from \"./CardValue\";\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`;\n\nexport default () => {\n  const BIG_NUMBER = new BigNumber(\"1000000000000000000\");\n  const cakePriceUsd = usePriceCakeBusd();\n  const totalSupply = useTotalSupply();\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()));\n  const plasmaSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0;\n  const circulatingSupply = plasmaSupply - burnedBalance;\n  const marketCap = cakePriceUsd.multipliedBy(circulatingSupply).toNumber();\n  const transferTax = 1.5;\n\n  const PlasmaPerBlock = () => {\n    const masterChefContract = useMasterchef();\n    const plasmaContract = useCake();\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n      async function fetchData() {\n        const maxTransferAmount = await plasmaContract.methods.maxTransferAmount().call();\n        const plasmaPerBlock = await masterChefContract.methods.tokensPerBlock().call();\n\n        setData({\n          maxTransferAmount,\n          plasmaPerBlock\n        });\n      }\n\n      fetchData();\n    }, [plasmaContract, masterChefContract]);\n\n    return data;\n  };\n\n  const PPB = PlasmaPerBlock() as any;\n  const maxTransactionAmount = (\"maxTransferAmount\" in PPB ? new BigNumber(PPB.maxTransferAmount).dividedBy(BIG_NUMBER).toNumber() : 0);\n  const newPlasmaPerBlock = (\"plasmaPerBlock\" in PPB ? new BigNumber(PPB.plasmaPerBlock).dividedBy(BIG_NUMBER).toNumber() : 0);\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          Plasma Statistics\n        </Heading>\n\n        <Row>\n          <Text fontSize=\"14px\">Market Cap</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={marketCap} prefix=\"$\" />\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">Circulating PLASMA Supply</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={circulatingSupply} />\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">Total PLASMA Burned</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">Total PLASMA Minted</Text>\n          <CardValue fontSize=\"14px\" value={plasmaSupply} />\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">Max Transaction Amount</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={maxTransactionAmount} />\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">New PLASMA/block</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={newPlasmaPerBlock} />\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">Transfer Tax</Text>\n          <CardValue fontSize=\"14px\" decimals={1} value={transferTax} suffix=\"%\" />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Card, CardBody, Heading } from \"@plasmaswap/uikit\";\nimport { TwitterTimelineEmbed } from \"react-twitter-embed\";\n\nconst StyledAnnouncements = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  margin-bottom: 8px;\n`;\n\nconst CakeStats = () => {\n  const options = {\n    width: \"1000\",\n    height: \"400px\"\n  };\n\n  return (\n    <StyledAnnouncements>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          Announcements\n        </Heading>\n        <Row>\n          <TwitterTimelineEmbed\n            sourceType=\"profile\"\n            screenName=\"GovRonDeSantis\"\n            options={options}\n            noScrollbar\n            noHeader\n            noFooter\n          />\n        </Row>\n      </CardBody>\n    </StyledAnnouncements>\n  );\n};\n\nexport default CakeStats;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Card, CardBody, Heading, Skeleton, Text } from '@plasmaswap/uikit';\nimport { BigNumber } from 'bignumber.js';\nimport { useFarms, usePools, usePriceCakeBusd, useGetApiPrices } from 'state/hooks';\nimport { getAddress } from 'utils/addressHelpers';\nimport { useWeb3React } from '@web3-react/core';\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`;\n\nfunction Commas(string) {\n  return string.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nconst TotalValueLockedCard = () => {\n  const { data: farmsLP } = useFarms();\n  const { account } = useWeb3React();\n  const pools = usePools(account);\n  const prices = useGetApiPrices();\n  const plasmaPrice = usePriceCakeBusd();\n  let tvlBigNumber = new BigNumber(0);\n  let pricesLoaded = false;\n  let tvlLoaded = false;\n\n  if (prices) {\n    const aprs = farmsLP.map((farm) => {\n      const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()];\n      const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd);\n      return totalLiquidity;\n    });\n\n    for (let i = 0; i < aprs.length; i++) {\n      if (!Number.isNaN(aprs[i].toNumber())) {\n        tvlBigNumber = tvlBigNumber.plus(aprs[i]);\n      }\n    }\n\n    for (let i = 0; i < pools.length; i++) {\n      const stakingTokenPriceUsd = (i === 0 ? plasmaPrice.toNumber() : prices[getAddress(pools[i].stakingToken.address).toLowerCase()]);\n      const divisor = new BigNumber(10).pow(pools[i].stakingToken.decimals);\n      const totalValueInPool = pools[i].totalStaked.dividedBy(divisor).multipliedBy(stakingTokenPriceUsd);\n      tvlBigNumber = tvlBigNumber.plus(totalValueInPool);\n    }\n\n    pricesLoaded = true;\n  }\n\n  if (tvlBigNumber.c) {\n    tvlLoaded = true;\n  }\n\n  const tvl = tvlBigNumber.toFixed(0).toString();\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading scale=\"lg\" mb=\"24px\">\n          Total Value Locked\n        </Heading>\n        {pricesLoaded && tvlLoaded ? (\n          <>\n            <Heading scale=\"xl\">{`$${Commas(tvl)}`}</Heading>\n            <Text color=\"textSubtle\">Across all farms and pools</Text>\n          </>\n        ) : (\n          <Skeleton height={66} />\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  );\n};\n\nexport default TotalValueLockedCard;\n","import React, { useMemo } from \"react\";\nimport styled from \"styled-components\";\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from \"@plasmaswap/uikit\";\nimport max from \"lodash/max\";\nimport { NavLink } from \"react-router-dom\";\nimport BigNumber from \"bignumber.js\";\nimport { getFarmApr } from \"utils/apr\";\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from \"state/hooks\";\nimport { getAddress } from \"utils/addressHelpers\";\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`;\n\nconst CardMidContent = styled(Heading).attrs({ scale: \"xl\" })`\n  line-height: 44px;\n`;\n\nconst EarnAPRCard = () => {\n  const { data: farmsLP } = useFarms();\n  const prices = useGetApiPrices();\n  const cakePrice = usePriceCakeBusd();\n\n  const highestApr = useMemo(() => {\n    const aprs = farmsLP\n      // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0\n      .filter((farm) => farm.pid !== 0 && farm.multiplier !== \"0X\")\n      .map((farm) => {\n        if (farm.lpTotalInQuoteToken && prices) {\n          const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n          return getFarmApr(farm.poolWeight, cakePrice, totalLiquidity)\n        }\n        return null\n      })\n\n    const maxApr = max(aprs)\n    return maxApr?.toLocaleString(\"en-US\", { maximumFractionDigits: 2 })\n  }, [cakePrice, farmsLP, prices])\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            Earn up to\n          </Heading>\n          <CardMidContent color=\"#7645d9\">\n            {highestApr ? `${highestApr}% APR` : <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />}\n          </CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\">\n              in Farms\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  );\n};\n\nexport default EarnAPRCard;\n","/* eslint-disable no-else-return */\n/* eslint-disable no-useless-return */\n/* eslint-disable consistent-return */\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Heading, Text, BaseLayout } from \"@plasmaswap/uikit\";\nimport Page from \"components/layout/Page\";\nimport FarmStakingCard from \"views/Home/components/FarmStakingCard\";\nimport CakeStats from \"views/Home/components/CakeStats\";\nimport Announcements from \"views/Home/components/Announcements\";\nimport TotalValueLockedCard from \"views/Home/components/TotalValueLockedCard\";\nimport EarnAPRCard from \"views/Home/components/EarnAPRCard\";\nimport { useBlock } from \"state/hooks\";\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/banner-left.png');\n  background-repeat: no-repeat;\n  background-position: top center;\n  background-size: contain;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/banner-left.png'), url('/images/banner-right.png');\n    background-position: left center, right center;\n    background-size: contain, auto;\n    height: 165px;\n    padding-top: 0;\n  }\n`;\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`;\n\nconst OutlineBig = styled.div`\n  font-size: 64px;\n  text-shadow:\n    0 0 4px #b500b4, 0 0 4px #b500b4,\n    0 0 4px #b500b4, 0 0 4px #b500b4,\n    0 0 4px #b500b4, 0 0 4px #b500b4,\n    0 0 4px #b500b4, 0 0 4px #b500b4,\n    0 0 4px #b500b4, 0 0 4px #b500b4;\n`;\n\nconst OutlineSmall = styled.div`\n  font-size: 24px;\n  text-shadow:\n    0 0 4px #b500b4, 0 0 4px #b500b4,\n    0 0 4px #b500b4, 0 0 4px #b500b4,\n    0 0 4px #b500b4, 0 0 4px #b500b4,\n    0 0 4px #b500b4, 0 0 4px #b500b4,\n    0 0 4px #b500b4, 0 0 4px #b500b4;\n`;\n\nconst Countdown = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 16px;\n  margin-bottom: 32px;\n  border: 1px solid cyan;\n  color: white;\n  background-color: #1d160d;\n  border-radius: 10px;\n`;\n\nconst CountdownRowHeader = styled.div`\n  display: flex;\n  margin-bottom: 8px;\n  font-size: 32px;\n  text-align: center;\n`;\n\nconst CountdownRow = styled.div`\n  display: flex;\n  font-size: 20px;\n  text-align: center;\n`;\n\nfunction Commas(string) {\n  return string.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nfunction Countdown2() {\n  const { currentBlock } = useBlock();\n    const START_BLOCK = 8620000;\n\n  if (currentBlock === 0) {\n    return <span />;\n  } else if (currentBlock < START_BLOCK) {\n    const blocksRemaining = START_BLOCK - currentBlock;\n    const seconds         = blocksRemaining * 3;\n    const minutesOver     = Math.floor(seconds / 60);\n    const minutes         = minutesOver % 60;\n    const hoursOver       = Math.floor(seconds / 60 / 60);\n    const hours           = hoursOver % 24;\n    const days            = Math.floor(seconds / 60 / 60 / 24);\n    const D = (days    === 1 ? \"day\"    : \"days\");\n    const H = (hours   === 1 ? \"hour\"   : \"hours\");\n    const M = (minutes === 1 ? \"minute\" : \"minutes\");\n    const ETA = `${days} ${D}, ${hours} ${H}, ${minutes} ${M}`;\n\n    return (\n      <Countdown>\n        <CountdownRowHeader>Countdown to the start of Plasma Swap rewards!</CountdownRowHeader>\n        <CountdownRow>Current Block: { Commas(currentBlock) }</CountdownRow>\n        <CountdownRow>Starting Block: { Commas(START_BLOCK) }</CountdownRow>\n        <CountdownRow>Blocks Remaining: { Commas(blocksRemaining) }</CountdownRow>\n        <CountdownRow>ETA: { ETA }</CountdownRow>\n      </Countdown>\n    );\n  } else if (currentBlock < START_BLOCK + 40000) {\n    // 40,000 blocks is about 24 hours\n    return (\n      <Countdown>\n        <CountdownRowHeader>Welcome to the grand opening of Plasma Swap!</CountdownRowHeader>\n      </Countdown>\n    );\n  } else {\n    return <span />;\n  }\n}\n\nconst Home: React.FC = () => {\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"secondary\">\n          <OutlineBig>Plasma Swap</OutlineBig>\n        </Heading>\n        <Text><OutlineSmall>Automatic Liquidity Acquisition Yield Farm & AMM</OutlineSmall></Text>\n      </Hero>\n\n      <Countdown2 />\n\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <Announcements />\n        </Cards>\n        <Cards>\n          <EarnAPRCard />\n          <TotalValueLockedCard />\n        </Cards>\n        <Cards>\n          <CakeStats />\n        </Cards>\n      </div>\n    </Page>\n  );\n};\n\nexport default Home;\n"],"sourceRoot":""}