{"version":3,"sources":["config/constants/farms.ts","hooks/useAuth.ts","utils/getRpcUrl.ts","hooks/useRefresh.ts","state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","utils/makeBatchRequest.ts","config/constants/meta.ts","components/layout/Page.tsx","hooks/useStake.ts","state/block/index.ts","utils/web3React.ts","utils/wallet.ts","state/prices/index.ts","config/constants/contracts.ts","utils/addressHelpers.ts","contexts/RefreshContext.tsx","components/layout/Container.tsx","contexts/ToastsContext/Provider.tsx","config/constants/index.ts","components/UnlockButton.tsx","hooks/useHarvest.ts","utils/apr.ts","hooks/useApprove.ts","hooks/useUnstake.ts","utils/bigNumber.ts","utils/formatBalance.ts","utils/contractHelpers.ts","utils/farmHelpers.ts","hooks/usePersistState.ts","components/layout/Flex.tsx","components/PageHeader/PageHeader.tsx","utils/compoundApyHelpers.ts","components/ApyCalculatorModal/index.tsx","state/actions.ts","state/index.ts","hooks/useWeb3.ts","config/index.ts","hooks/useContract.ts","state/types.ts","state/predictions/helpers.ts","state/pools/helpers.ts","state/hooks.ts","contexts/Localization/helpers.ts","contexts/Localization/Provider.tsx","contexts/Localization/useTranslation.ts","utils/multicall.ts","config/constants/tokens.ts","config/constants/pools.ts","utils/callHelpers.ts","utils/web3.ts","config/localization/languages.ts","state/pools/fetchPools.ts","state/pools/fetchPoolsUser.ts","views/Pools/helpers.tsx","state/pools/fetchVaultPublic.ts","state/pools/fetchVaultUser.ts","state/pools/index.ts","hooks/useEagerConnect.ts","style/Global.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/SuspenseWithChunkError/index.tsx","components/ToastListener/index.tsx","components/PageLoader.tsx","components/Balance.tsx","views/Pools/components/PoolCard/AprRow.tsx","views/Pools/components/PoolCard/StyledCard.tsx","views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx","views/Pools/components/PoolCard/CardFooter/index.tsx","views/Pools/components/PoolCard/StyledCardHeader.tsx","views/Pools/components/PoolCard/CardActions/ApprovalAction.tsx","views/Pools/components/PoolCard/Modals/NotEnoughTokensModal.tsx","views/Pools/components/PoolCard/Modals/PercentageButton.tsx","views/Pools/components/PoolCard/Modals/StakeModal.tsx","views/Pools/components/PoolCard/CardActions/StakeActions.tsx","views/Pools/components/PoolCard/Modals/CollectModal.tsx","views/Pools/components/PoolCard/CardActions/HarvestActions.tsx","views/Pools/components/PoolCard/CardActions/index.tsx","views/Pools/components/PoolCard/index.tsx","views/Pools/components/PoolTabButtons.tsx","views/Pools/index.tsx","App.tsx","Providers.tsx","index.tsx","state/profile/helpers.ts","state/profile/getProfile.ts","state/profile/index.tsx","hooks/useToast.ts","config/constants/types.ts"],"names":["farms","pid","lpSymbol","harvestLockup","lpAddresses","56","137","80001","token","tokens","plasma","quoteToken","wbnb","matic","busd","useAuth","dispatch","useAppDispatch","useWeb3React","activate","deactivate","toastError","useToast","login","useCallback","connectorID","connector","connectorsByName","error","a","UnsupportedChainIdError","setupNetwork","window","localStorage","removeItem","connectorLocalStorageKey","NoEthereumProviderError","NoBscProviderError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","WalletConnectConnector","walletConnectProvider","name","message","logout","profileClear","nodes","process","getNodeUrl","randomIndex","random","length","useRefresh","useContext","RefreshContext","fastRefresh","fast","slowRefresh","slow","fetchFarms","farmsToFetch","address","Promise","all","map","farmConfig","lpAddress","getAddress","masterChefAddress","getMasterChefAddress","calls","params","multicall","erc20","tokenBalanceLP","quoteTokenBalanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","lpTokenRatio","BigNumber","div","lpTotalInQuoteToken","DEFAULT_TOKEN_DECIMAL","times","tokenAmount","BIG_TEN","pow","quoteTokenAmount","masterchefABI","info","totalAllocPointsFarms","canHarvest","allocPoint","_hex","poolWeight","harvest","toJSON","tokenPriceVsQuote","multiplier","toString","data","fetchFarmUserAllowances","account","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","stakedBalance","nextHarvest","nextHarvestUntil","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","nonArchivedFarms","farmsConfig","filter","isArchivedPid","initialState","userData","allowance","loadArchivedFarmsData","userDataLoaded","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","findIndex","setLoadArchivedFarmsData","actions","fetchFarmsPublicDataAsync","getState","fetchArchived","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","makeBatchRequest","batch","getWeb3NoAccount","BatchRequest","promises","call","resolve","reject","add","request","err","result","execute","DEFAULT_META","title","description","image","customMeta","StyledPage","styled","Container","theme","mediaQueries","sm","lg","PageMeta","pathname","useLocation","cakePriceUsd","usePriceCakeBusd","cakePriceUsdDisplay","eq","toNumber","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","pageMeta","pageTitle","join","property","content","Page","children","props","useSousStake","sousId","isUsingBnb","masterChefContract","useMasterchef","sousChefContract","useSousChef","handleStake","amount","decimals","stake","updateUserStakedBalance","updateUserBalance","onStake","useStake","txHash","console","blockSlice","currentBlock","initialBlock","setBlock","rpcUrl","chainId","parseInt","injected","InjectedConnector","supportedChainIds","walletconnect","rpc","bridge","qrcode","pollingInterval","bscConnector","BscConnector","ConnectorNames","Injected","WalletConnect","BSC","getLibrary","provider","ethereum","method","chainName","nativeCurrency","symbol","rpcUrls","blockExplorerUrls","registerToken","tokenAddress","tokenSymbol","tokenImage","type","options","tokenAdded","fetchPrices","createAsyncThunk","fetch","response","json","updated_at","Object","keys","reduce","accum","toLowerCase","parseFloat","price","pricesSlice","isLoading","lastUpdated","extraReducers","builder","addCase","pending","fulfilled","getCakeAddress","addresses","getMulticallAddress","getWbnbAddress","getLotteryAddress","getLotteryTicketAddress","getPancakeProfileAddress","getPancakeRabbitsAddress","getBunnyFactoryAddress","getClaimRefundAddress","getPointCenterIfoAddress","getBunnySpecialAddress","getTradingCompetitionAddress","getEasterNftAddress","getCakeVaultAddress","getPredictionsAddress","getChainlinkOracleAddress","React","createContext","RefreshContextProvider","useState","setSlow","setFast","useEffect","interval","setInterval","prev","clearInterval","Provider","value","ToastsContext","ToastsProvider","toasts","setToasts","toast","prevToasts","id","kebabCase","currentToasts","prevToast","clear","remove","toastTypes","DANGER","toastInfo","INFO","toastSuccess","SUCCESS","toastWarning","WARNING","UnlockButton","t","useTranslation","onPresentConnectModal","useWalletModal","onClick","useHarvest","farmPid","onReward","useAllHarvest","farmPids","harvestPromises","useSousHarvest","handleHarvest","updateUserPendingReward","getPoolApr","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","BLOCKS_PER_YEAR","totalStakingTokenInPool","apr","isNaN","isFinite","getFarmApr","poolLiquidityUsd","CAKE_PER_BLOCK","useApprove","lpContract","onApprove","approve","tx","useSousApprove","updateUserAllowance","useSousUnstake","enableEmergencyWithdraw","handleUnstake","unstake","onUnstake","useUnstake","BIG_ZERO","getDecimalAmount","getBalanceAmount","dividedBy","getBalanceNumber","balance","getFullDisplayBalance","decimalsToAppear","toFixed","formatNumber","number","minPrecision","maxPrecision","getContract","abi","web3","web3NoAccount","eth","Contract","getBep20Contract","bep20Abi","getErc721Contract","erc721Abi","getIfoV1Contract","ifoV1Abi","getIfoV2Contract","ifoV2Abi","getSouschefContract","config","poolsConfig","pool","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","getSouschefV2Contract","sousChefV2","getPointCenterIfoContract","pointCenterIfo","getCakeContract","cakeAbi","getProfileContract","profileABI","getPancakeRabbitContract","pancakeRabbitsAbi","getBunnyFactoryContract","bunnyFactoryAbi","getBunnySpecialContract","bunnySpecialAbi","getLotteryContract","lotteryAbi","getLotteryTicketContract","lotteryTicketAbi","getMasterchefContract","masterChef","getClaimRefundContract","claimRefundAbi","getTradingCompetitionContract","tradingCompetitionAbi","getEasterNftContract","easterNftAbi","getCakeVaultContract","cakeVaultAbi","getPredictionsContract","predictionsAbi","getChainlinkOracleContract","chainlinkOracleAbi","usePersistState","initialValue","localStorageKey","valueFromLS","getItem","JSON","parse","setValue","setItem","stringify","FlexLayout","Outer","Box","background","colors","gradients","bubblegum","Inner","PageHeader","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenPrice","roundingDecimals","compoundFrequency","performanceFee","timesCompounded","aprAsDecimal","daysAsDecimalOfYear","principal","finalAmount","getRoi","amountEarned","amountInvested","Grid","GridItem","ApyCalculatorModal","onDismiss","linkLabel","linkHref","earningTokenSymbol","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","fontSize","bold","color","textTransform","mb","maxWidth","freq","mt","fee","justifyContent","href","store","configureStore","devTools","reducer","block","blockReducer","farmsReducer","pools","poolsReducer","prices","pricesReducer","profile","profileReducer","useDispatch","useWeb3","library","refEth","useRef","Web3","setweb3","current","EXPONENTIAL_AT","DECIMAL_PLACES","BASE_URL","BASE_EXCHANGE_URL","BASE_ADD_LIQUIDITY_URL","BASE_BSC_SCAN_URL","useERC20","useMemo","useCake","useLottery","BetPosition","PredictionStatus","HistoryFilter","Result","transformUserData","stakingTokenBalance","pendingReward","transformPool","stakingLimit","rest","useFetchPublicData","fetchPoolsPublicDataAsync","getBlockNumber","blockNumber","useFarms","useSelector","useFarmFromPid","useFarmUser","usePools","fetchPoolsUserDataAsync","useFetchCakeVault","fetchCakeVaultPublicData","fetchCakeVaultUserData","fetchCakeVaultFees","useCakeVault","cakeVault","totalSharesAsString","totalShares","pricePerFullShareAsString","pricePerFullShare","totalCakeInVaultAsString","totalCakeInVault","estimatedCakeBountyRewardAsString","estimatedCakeBountyReward","totalPendingCakeHarvestAsString","totalPendingCakeHarvest","fees","callFee","withdrawalFee","withdrawalFeePeriod","userSharesAsString","userShares","cakeAtLastUserActionAsString","cakeAtLastUserAction","lastDepositedTime","lastUserActionTime","useFetchProfile","fetchProfile","useFetchPriceList","useGetApiPrices","useGetApiPrice","useBlock","LS_KEY","fetchLocale","locale","getLanguageCodeFromLS","EN","isFetching","currentLanguage","languageMap","Map","set","translations","LanguageContext","LanguageProvider","codeFromStorage","languages","setState","enLocale","get","currentLocale","prevState","fetchInitialLocales","setLanguage","language","has","translate","key","translatedText","match","interpolatedText","dataKey","templateKey","RegExp","replace","languageContext","Error","multi","MultiCallAbi","itf","Interface","calldata","encodeFunctionData","methods","aggregate","returnData","res","i","decodeFunctionResult","bnb","projectLink","btc","ltc","usdc","usdt","dai","cake","ada","link","MASTER_CHEF_CONTRACT_ADDRESS_MATIC_TEST","stakingToken","earningToken","sortOrder","isFinished","CORE","ethers","constants","MaxUint256","send","from","referrer","document","cookie","indexOf","START","END","substring","deposit","gas","on","transactionHash","withdraw","RPC_URL","getRpcUrl","httpProvider","providers","HttpProvider","timeout","code","languageList","values","fetchPoolsTotalStaking","nonBnbPools","p","callCakeABI","cakeABI","b","input","callMasterChefABI1","callMasterChefABI2","c","d","e","push","bnbPools","masterChefABI","fetchPoolsAllowance","allowances","acc","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","returnObj","users","masterPoolAmount","fetchUserPendingRewards","pendingTokens","convertSharesToCake","shares","cakePerFullShare","decimalsToRound","sharePriceNumber","amountInCake","multipliedBy","cakeAsNumberBalance","cakeAsBigNumber","cakeAsDisplayBalance","cakeVaultContract","fetchPublicVaultData","getPricePerFullShare","calculateHarvestCakeRewards","calculateTotalPendingCakeRewards","sharePrice","totalSharesAsBigNumber","sharePriceAsBigNumber","totalCakeInVaultEstimate","fetchVaultFees","withdrawFee","withdrawFeePeriod","fetchVaultUser","userContractResponse","totalStakings","liveData","totalStaking","entry","setPoolsPublicData","stakingTokenBalances","stakedBalances","pendingRewards","setPoolsUserData","updatePoolsUserData","field","publicVaultInfo","vaultFees","PoolsSlice","livePoolsData","livePoolData","userPoolData","_binanceChainListener","defineProperty","this","bsc","useEagerConnect","connectorId","isConnectorBinanceChain","isBinanceChainDefined","Reflect","then","GlobalStyle","createGlobalStyle","CACHE_KEY","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","setIsDark","dark","light","useTheme","StyledThemeContext","label","icon","items","Menu","currentLang","langs","setLang","links","SuspenseWithChunkError","hasError","isJsChunkLoadError","isCssChunkLoadError","isChunkLoadError","isRecoveringFromChunkError","history","nextState","replaceState","location","reload","fallback","Component","ToastListener","onRemove","Wrapper","PageLoader","Balance","isDisabled","unit","prefix","previousValue","showPrefix","Boolean","showUnit","start","end","duration","separator","AprRow","earningTokenPrice","isHighValueToken","Math","round","apyModalLink","useModal","onPresentApyModal","alignItems","width","height","variant","scale","PromotedGradient","keyframes","StyledCard","Card","isPromotedPool","css","primaryBright","secondary","card","StyledCardInner","ExpandedWrapper","Flex","ExpandedFooter","isAutoVault","startBlock","endBlock","poolContractAddress","cakeVaultContractAddress","imageSrc","isMetaMaskInScope","isMetaMask","shouldShowBlockCountdown","blocksUntilStart","max","blocksRemaining","hasPoolStarted","useTooltip","placement","targetRef","tooltip","tooltipVisible","flexDirection","small","ml","ref","memo","ExpandableButtonWrapper","Footer","isExpanded","setIsExpanded","expanded","CardHeader","backgroundDisabled","MultiplierTag","Tag","StyledCardHeader","stakingTokenSymbol","poolImageSrc","toLocaleLowerCase","src","alt","ApprovalAction","stakingTokenContract","requestedApproval","setRequestedApproval","handleApprove","endIcon","spin","disabled","NotEnoughTokensModal","headerBackground","cardHeader","as","external","StyledButton","Button","PercentageButton","mx","StyledLink","Link","StakeModal","isBnbPool","isRemovingStake","pendingTx","setPendingTx","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","setPercent","getCalculatedStakingLimit","gt","usdValueStaked","fullDecimalStakeAmount","plus","handleChangePercent","sliderPercent","percentageOfStakingMax","amountToStake","handleConfirmClick","style","textAlign","minWidth","onUserInput","convertedInput","percentage","floor","min","currencyValue","isWarning","StakeAction","isStaked","stakedTokenBalance","stakedTokenDollarBalance","onPresentTokenRequired","onPresentStake","onPresentUnstake","reachStakingLimit","gte","mr","CollectModal","formattedBalance","fullBalance","earningsDollarValue","isCompoundPool","shouldCompound","setShouldCompound","tooltipOffset","handleHarvestConfirm","activeIndex","onItemClick","pb","HarvestActions","earningTokenBalance","earningTokenDollarBalance","hasEarnings","onPresentCollect","secondsRemaining","Date","now","minutesRemaining","ceil","lockupString","display","InlineText","Text","CardActions","needsApproval","StakeActions","HarvestLockupRow","Col1","Col2","ReferenceElement","PoolCard","accountHasStakedBalance","ribbon","variantColor","text","isStaking","CardFooter","ButtonText","UiKitLink","PoolTabButtons","stakedOnly","setStakedOnly","hasStakeInFinishedPools","useRouteMatch","url","isExact","to","show","checked","onChange","px","Pools","path","numberOfPoolsVisible","setNumberOfPoolsVisible","observerIsSet","setObserverIsSet","loadMoreRef","partition","finishedPools","openPools","stakedOnlyFinishedPools","isGreaterThan","stakedOnlyOpenPools","IntersectionObserver","entries","isIntersecting","poolsCurrentlyVisible","rootMargin","threshold","observe","exact","orderBy","slice","Home","lazy","Farms","EvensAndOdds","Prediction","Lottery","Referrals","Audits","NotFound","App","getParams","queryString","search","useCookies","setCookie","removeCookie","referralAddress","refer","utils","isAddress","expires","Global","component","Providers","ReactDOM","render","StrictMode","getElementById","transformProfileResponse","profileResponse","userId","numberPoints","teamId","nftAddress","tokenId","isActive","Number","points","profileContract","profileApi","REACT_APP_API_PROFILE","getUsername","ok","username","getProfile","hasRegistered","getUserProfile","Cookies","avatar","domain","secure","isInitialized","profileSlice","profileFetchStart","profileFetchSucceeded","_state","profileFetchFailed","addPoints","toastContext","PoolIds","NftType"],"mappings":"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","file":"static/js/main.ab2c1b7f.chunk.js","sourcesContent":["import tokens from \"./tokens\";\nimport { FarmConfig } from \"./types\";\n\nconst farms: FarmConfig[] = [\n  {\n    // NOTE: The first index of this array DOES NOT show up in the Farms tab which is intentional\n    pid: 0, // Pool ID in the master chef\n    lpSymbol: \"PLASMA\",\n    harvestLockup: \"2 hours\",\n    lpAddresses: {\n      56: \"\", // (PLASMA)\n      137: \"\",\n      80001: \"0xddF507a5355E6fB7356bc4370600286d5A5b26af\",\n    },\n    token: tokens.plasma,\n    quoteToken: tokens.wbnb,\n  },\n  {\n    pid: 1,\n    lpSymbol: \"MATIC-PLASMA LP\",\n    harvestLockup: \"2 hours\",\n    lpAddresses: {\n      56: \"\",\n      137: \"\",\n      80001: \"0xC8A03fBF6F89868b6D5942ea2aaF0ce3F94606FE\",\n    },\n    token: tokens.plasma,\n    quoteToken: tokens.matic,\n  },\n  {\n    pid: 2,\n    lpSymbol: \"MATIC-BUSD LP\",\n    harvestLockup: \"2 hours\",\n    lpAddresses: {\n      56: \"\",\n      137: \"\",\n      80001: \"0x37079f752238e32418a848b4395163ef2d116C48\",\n    },\n    token: tokens.plasma,\n    quoteToken: tokens.busd,\n  },\n  // {\n  //   pid: 3,\n  //   lpSymbol: \"MATIC-BUSD LP\",\n  //   harvestLockup: \"2 hours\",\n  //   lpAddresses: {\n  //     56: \"\",\n  //     137: \"\",\n  //     80001: \"0xeA2A3Ef7021E2cBe957e884ECfe390C40b5e174e\",\n  //   },\n  //   token: tokens.matic,\n  //   quoteToken: tokens.busd,\n  // },\n  // {\n  //   pid: 4,\n  //   lpSymbol: \"USDC-USDT LP\",\n  //   harvestLockup: \"2 hours\",\n  //   lpAddresses: {\n  //     56: \"\",\n  //     137: \"\",\n  //     80001: \"0x6B901EfA638C39b34b99b25e6DdF360194C88029\",\n  //   },\n  //   token: tokens.usdc,\n  //   quoteToken: tokens.usdt,\n  // },\n  // {\n  //   pid: 3,\n  //   lpSymbol: \"BUSD-USDC LP\",\n  //   harvestLockup: \"2 hours\",\n  //   lpAddresses: {\n  //     56: \"\",\n  //     137: \"\",\n  //     80001: \"\",\n  //   },\n  //   token: tokens.busd,\n  //   quoteToken: tokens.usdc,\n  // },\n  // {\n  //   pid: 4,\n  //   lpSymbol: \"BUSD-USDT LP\",\n  //   harvestLockup: \"2 hours\",\n  //   lpAddresses: {\n  //     56: \"\",\n  //     137: \"\",\n  //     80001: \"\",\n  //   },\n  //   token: tokens.busd,\n  //   quoteToken: tokens.usdt,\n  // },\n  // {\n  //   pid: 2,\n  //   lpSymbol: \"USDC-USDT LP\",\n  //   harvestLockup: \"2 hours\",\n  //   lpAddresses: {\n  //     56: \"\",\n  //     137: \"\",\n  //     80001: \"\",\n  //   },\n  //   token: tokens.usdc,\n  //   quoteToken: tokens.usdt,\n  // },\n  // {\n  //   pid: 5,\n  //   lpSymbol: \"CAKE-BNB LP\",\n  //   harvestLockup: \"2 hours\",\n  //   lpAddresses: {\n  //     56: \"\",\n  //     137: \"\",\n  //     80001: \"\",\n  //   },\n  //   token: tokens.cake,\n  //   quoteToken: tokens.wbnb,\n  // }\n  // {\n  //   pid: 999,\n  //   lpSymbol: \"PLASMA-BUSD LP\",\n  //   harvestLockup: \"2 hours\",\n  //   lpAddresses: {\n  //     56: \"\",\n  //     137: \"\",\n  //     80001: \"\",\n  //   },\n  //   token: tokens.plasma,\n  //   quoteToken: tokens.busd,\n  // },\n  // {\n  //   pid: 999,\n  //   lpSymbol: \"ETH-BNB LP\",\n  //   harvestLockup: \"2 hours\",\n  //   lpAddresses: {\n  //     56: \"\",\n  //     137: \"\",\n  //     80001: \"\",\n  //   },\n  //   token: tokens.eth,\n  //   quoteToken: tokens.wbnb,\n  // },\n  // {\n  //   pid: 999,\n  //   lpSymbol: \"BTCB-BNB LP\",\n  //   harvestLockup: \"2 hours\",\n  //   lpAddresses: {\n  //     56: \"\",\n  //     137: \"\",\n  //     80001: \"\",\n  //   },\n  //   token: tokens.btc,\n  //   quoteToken: tokens.wbnb,\n  // }\n];\n\nexport default farms;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useCallback } from \"react\";\nimport { useWeb3React, UnsupportedChainIdError } from \"@web3-react/core\";\nimport { NoBscProviderError } from \"@binance-chain/bsc-connector\";\nimport { NoEthereumProviderError, UserRejectedRequestError as UserRejectedRequestErrorInjected } from \"@web3-react/injected-connector\";\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect, WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\nimport { ConnectorNames, connectorLocalStorageKey } from \"@plasmaswap/uikit\";\nimport { connectorsByName } from \"utils/web3React\";\nimport { setupNetwork } from \"utils/wallet\";\nimport useToast from \"hooks/useToast\";\nimport { profileClear } from \"state/profile\";\nimport { useAppDispatch } from \"state\";\n\nconst useAuth = () => {\n  const dispatch = useAppDispatch()\n  const { activate, deactivate } = useWeb3React()\n  const { toastError } = useToast()\n\n  const login = useCallback((connectorID: ConnectorNames) => {\n    const connector = connectorsByName[connectorID]\n    if (connector) {\n      activate(connector, async (error: Error) => {\n        if (error instanceof UnsupportedChainIdError) {\n          const hasSetup = await setupNetwork()\n          if (hasSetup) {\n            activate(connector)\n          }\n        } else {\n          window.localStorage.removeItem(connectorLocalStorageKey)\n          if (error instanceof NoEthereumProviderError || error instanceof NoBscProviderError) {\n            toastError(\"Provider Error\", \"No provider was found\")\n          } else if (\n            error instanceof UserRejectedRequestErrorInjected ||\n            error instanceof UserRejectedRequestErrorWalletConnect\n          ) {\n            if (connector instanceof WalletConnectConnector) {\n              const walletConnector = connector as WalletConnectConnector\n              walletConnector.walletConnectProvider = null\n            }\n            toastError(\"Authorization Error\", \"Please authorize to access your account\")\n          } else {\n            toastError(error.name, error.message)\n          }\n        }\n      })\n    } else {\n      toastError(\"Can't find connector\", \"The connector config is wrong\")\n    }\n  }, [])\n\n  const logout = useCallback(() => {\n    dispatch(profileClear())\n    deactivate()\n  }, [deactivate, dispatch])\n\n  return { login, logout }\n}\n\nexport default useAuth\n","import random from \"lodash/random\";\n\nexport const nodes = [\n  process.env.REACT_APP_NODE_1,\n  process.env.REACT_APP_NODE_2,\n  process.env.REACT_APP_NODE_3\n];\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1);\n  return nodes[randomIndex];\n};\n\nexport default getNodeUrl;\n","import { useContext } from \"react\";\nimport { RefreshContext } from \"contexts/RefreshContext\";\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import BigNumber from \"bignumber.js\";\nimport erc20 from \"config/abi/erc20.json\";\nimport masterchefABI from \"config/abi/masterchef.json\";\nimport multicall from \"utils/multicall\";\nimport { BIG_TEN } from \"utils/bigNumber\";\nimport { getAddress, getMasterChefAddress } from \"utils/addressHelpers\";\nimport { FarmConfig } from \"config/constants/types\";\nimport { DEFAULT_TOKEN_DECIMAL } from \"config\";\n\nconst fetchFarms = async (farmsToFetch: FarmConfig[], address: string) => {\n  const data = await Promise.all(\n    farmsToFetch.map(async (farmConfig) => {\n      const lpAddress = getAddress(farmConfig.lpAddresses);\n      const masterChefAddress = getMasterChefAddress();\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          name: \"balanceOf\",\n          address: getAddress(farmConfig.token.address),\n          params: [lpAddress],\n        },\n        // Balance of quote token on LP contract\n        {\n          name: \"balanceOf\",\n          address: getAddress(farmConfig.quoteToken.address),\n          params: [lpAddress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          name: \"balanceOf\",\n          address: lpAddress,\n          params: [masterChefAddress],\n        },\n        // Total supply of LP tokens\n        {\n          name: \"totalSupply\",\n          address: lpAddress,\n        },\n        // Token decimals\n        {\n          name: \"decimals\",\n          address: getAddress(farmConfig.token.address),\n        },\n        // Quote token decimals\n        {\n          name: \"decimals\",\n          address: getAddress(farmConfig.quoteToken.address),\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBalanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls);\n\n      // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n      const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n      // Total value in staking in quote token value\n      const lpTotalInQuoteToken = new BigNumber(quoteTokenBalanceLP)\n        .div(DEFAULT_TOKEN_DECIMAL)\n        .times(new BigNumber(2))\n        .times(lpTokenRatio)\n\n      // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n      const tokenAmount = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals)).times(lpTokenRatio)\n\n      const quoteTokenAmount = new BigNumber(quoteTokenBalanceLP)\n        .div(BIG_TEN.pow(quoteTokenDecimals))\n        .times(lpTokenRatio)\n\n      const [info, totalAllocPointsFarms, canHarvest] = await multicall(masterchefABI, [\n        {\n          name: \"pools\",\n          address: masterChefAddress,\n          params: [farmConfig.pid],\n        },\n        {\n          name: \"totalAllocPointsFarms\",\n          address: masterChefAddress,\n        },\n        {\n          name: \"canHarvest\",\n          address: masterChefAddress,\n          params: [farmConfig.pid, address],\n        }\n      ]);\n\n      const allocPoint = new BigNumber(info.allocPoint._hex);\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPointsFarms));\n      const harvest = canHarvest[0];\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        quoteTokenAmount: quoteTokenAmount.toJSON(),\n        lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: quoteTokenAmount.div(tokenAmount).toJSON(),\n        poolWeight: poolWeight.toJSON(),\n        multiplier: `${allocPoint.div(100).toString()}x`,\n        canHarvest: harvest\n      }\n    })\n  );\n\n  return data;\n};\n\nexport default fetchFarms;\n","import BigNumber from \"bignumber.js\";\nimport erc20ABI from \"config/abi/erc20.json\";\nimport masterchefABI from \"config/abi/masterchef.json\";\nimport multicall from \"utils/multicall\";\nimport { getAddress, getMasterChefAddress } from \"utils/addressHelpers\";\nimport { FarmConfig } from \"config/constants/types\";\n\nexport const fetchFarmUserAllowances = async (account: string, farmsToFetch: FarmConfig[]) => {\n  const masterChefAddress = getMasterChefAddress()\n\n  const calls = farmsToFetch.map((farm) => {\n    const lpContractAddress = getAddress(farm.lpAddresses)\n    return { address: lpContractAddress, name: \"allowance\", params: [account, masterChefAddress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string, farmsToFetch: FarmConfig[]) => {\n  const calls = farmsToFetch.map((farm) => {\n    const lpContractAddress = getAddress(farm.lpAddresses)\n    return {\n      address: lpContractAddress,\n      name: \"balanceOf\",\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string, farmsToFetch: FarmConfig[]) => {\n  const masterChefAddress = getMasterChefAddress()\n\n  const calls = farmsToFetch.map((farm) => {\n    return {\n      address: masterChefAddress,\n      name: \"users\",\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n\n  return rawStakedBalances.map((stakedBalance) => {\n    return {\n      stakedBalance: new BigNumber(stakedBalance[0]._hex).toJSON(),\n      nextHarvest: new BigNumber(stakedBalance.nextHarvestUntil._hex).toJSON()\n    };\n  });\n}\n\nexport const fetchFarmUserEarnings = async (account: string, farmsToFetch: FarmConfig[]) => {\n  const masterChefAddress = getMasterChefAddress()\n  const calls = farmsToFetch.map((farm) => {\n    return {\n      address: masterChefAddress,\n      name: \"pendingTokens\",\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport farmsConfig from \"config/constants/farms\";\nimport isArchivedPid from \"utils/farmHelpers\";\nimport fetchFarms from \"./fetchFarms\";\nimport { fetchFarmUserEarnings, fetchFarmUserAllowances, fetchFarmUserTokenBalances, fetchFarmUserStakedBalances } from \"./fetchFarmUser\";\nimport { FarmsState, Farm } from \"../types\";\n\nconst nonArchivedFarms = farmsConfig.filter(({ pid }) => !isArchivedPid(pid))\nconst noAccountFarmConfig = farmsConfig.map((farm) => ({\n  ...farm,\n  userData: {\n    allowance: \"0\",\n    tokenBalance: \"0\",\n    stakedBalance: \"0\",\n    earnings: \"0\",\n    nextHarvest: \"0\"\n  },\n}))\n\nconst initialState: FarmsState = { data: noAccountFarmConfig, loadArchivedFarmsData: false, userDataLoaded: false }\n\nexport const farmsSlice = createSlice({\n  name: \"Farms\",\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { pid } = userDataEl\n        const index = state.data.findIndex((farm) => farm.pid === pid)\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n      state.userDataLoaded = true\n    },\n    setLoadArchivedFarmsData: (state, action) => {\n      const loadArchivedFarmsData = action.payload\n      state.loadArchivedFarmsData = loadArchivedFarmsData\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData, setLoadArchivedFarmsData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = (address) => async (dispatch, getState) => {\n  const fetchArchived = getState().farms.loadArchivedFarmsData;\n  const farmsToFetch = fetchArchived ? farmsConfig : nonArchivedFarms;\n  const farms = await fetchFarms(farmsToFetch, address);\n  dispatch(setFarmsPublicData(farms));\n}\n\nexport const fetchFarmUserDataAsync = (account: string) => async (dispatch, getState) => {\n  const fetchArchived = getState().farms.loadArchivedFarmsData\n  const farmsToFetch = fetchArchived ? farmsConfig : nonArchivedFarms\n  const userFarmAllowances = await fetchFarmUserAllowances(account, farmsToFetch)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsToFetch)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsToFetch)\n  const userFarmEarnings = await fetchFarmUserEarnings(account, farmsToFetch)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      pid: farmsToFetch[index].pid,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index].stakedBalance,\n      nextHarvest: userStakedBalances[index].nextHarvest,\n      earnings: userFarmEarnings[index],\n    }\n  });\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import { getWeb3NoAccount } from \"./web3\";\n\nconst makeBatchRequest = (calls: any[]) => {\n  try {\n    const web3 = getWeb3NoAccount()\n    const batch = new web3.BatchRequest()\n\n    const promises = calls.map((call) => {\n      return new Promise((resolve, reject) => {\n        batch.add(\n          call.request({}, (err, result) => {\n            if (err) {\n              reject(err)\n            } else {\n              resolve(result)\n            }\n          }),\n        )\n      })\n    })\n\n    batch.execute()\n\n    return Promise.all(promises)\n  } catch {\n    return null\n  }\n}\n\nexport default makeBatchRequest\n","import { PageMeta } from \"./types\";\n\nexport const DEFAULT_META: PageMeta = {\n  title: \"Plasma Swap\",\n  description: \"Automatic Liquidity Acquisition Yield Farm & AMM\",\n  image: \"https://plasticsolutionsllc.github.io/images/hero.png\",\n}\n\nexport const customMeta: { [key: string]: PageMeta } = {\n  \"/\": {\n    title: \"Home\"\n  },\n  \"/farms\": {\n    title: \"Farms\"\n  },\n  \"/pools\": {\n    title: \"Pools\"\n  },\n  \"/games/evens-and-odds\": {\n    title: \"Evens & Odds (coming soon!)\"\n  },\n  \"/games/prediction\": {\n    title: \"Prediction (coming soon!)\"\n  },\n  \"/games/lottery\": {\n    title: \"Lottery (coming soon!)\"\n  },\n  // \"/adoption-center\": {\n  //   title: \"Adoption Center\"\n  // },\n  \"/referrals\": {\n    title: \"Referrals\"\n  },\n  \"/audits\": {\n    title: \"Audits\"\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useLocation } from \"react-router\";\nimport { customMeta, DEFAULT_META } from \"config/constants/meta\";\nimport { usePriceCakeBusd } from \"state/hooks\";\nimport Container from \"./Container\";\n\nconst StyledPage = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nconst PageMeta = () => {\n  const { pathname } = useLocation()\n  const cakePriceUsd = usePriceCakeBusd()\n  const cakePriceUsdDisplay = cakePriceUsd.eq(0)\n    ? \"\"\n    : `$${cakePriceUsd.toNumber().toLocaleString(undefined, {\n        minimumFractionDigits: 3,\n        maximumFractionDigits: 3,\n      })}`\n  const pageMeta = customMeta[pathname] || {}\n  const { title, description, image } = { ...DEFAULT_META, ...pageMeta }\n  const pageTitle = cakePriceUsdDisplay ? [title, cakePriceUsdDisplay].join(\" - \") : title\n\n  return (\n    <Helmet>\n      <title>{pageTitle}</title>\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={image} />\n    </Helmet>\n  )\n}\n\nconst Page: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({ children, ...props }) => {\n  return (\n    <>\n      <PageMeta />\n      <StyledPage {...props}>{children}</StyledPage>\n    </>\n  )\n}\n\nexport default Page\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useCallback } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useAppDispatch } from \"state\";\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from \"state/actions\";\nimport { stake } from \"utils/callHelpers\";\nimport { useMasterchef, useSousChef } from \"./useContract\";\n\nconst useStake = (pid: number) => {\n  const dispatch = useAppDispatch();\n  const { account } = useWeb3React();\n  const masterChefContract = useMasterchef();\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account);\n      dispatch(fetchFarmUserDataAsync(account));\n      console.info(txHash);\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake };\n}\n\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch();\n  const { account } = useWeb3React();\n  const masterChefContract = useMasterchef();\n  const sousChefContract = useSousChef(sousId);\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      await stake(masterChefContract, sousId, amount, account);\n      dispatch(updateUserStakedBalance(sousId, account));\n      dispatch(updateUserBalance(sousId, account));\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake };\n}\n\nexport default useStake;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { BlockState } from \"../types\";\n\nconst initialState: BlockState = { currentBlock: 0, initialBlock: 0 }\n\nexport const blockSlice = createSlice({\n  name: \"Block\",\n  initialState,\n  reducers: {\n    setBlock: (state, action: PayloadAction<number>) => {\n      if (state.initialBlock === 0) {\n        state.initialBlock = action.payload\n      }\n\n      state.currentBlock = action.payload\n    },\n  },\n})\n\n// Actions\nexport const { setBlock } = blockSlice.actions\n\nexport default blockSlice.reducer\n","import { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\nimport { BscConnector } from \"@binance-chain/bsc-connector\";\nimport { ConnectorNames } from \"@plasmaswap/uikit\";\nimport Web3 from \"web3\";\nimport getNodeUrl from \"./getRpcUrl\";\n\nconst POLLING_INTERVAL = 12000\nconst rpcUrl = getNodeUrl()\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\nconst injected = new InjectedConnector({ supportedChainIds: [chainId] })\n\nconst walletconnect = new WalletConnectConnector({\n  rpc: { [chainId]: rpcUrl },\n  bridge: \"https://pancakeswap.bridge.walletconnect.org/\",\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL,\n})\n\nconst bscConnector = new BscConnector({ supportedChainIds: [chainId] })\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.WalletConnect]: walletconnect,\n  [ConnectorNames.BSC]: bscConnector,\n}\n\nexport const getLibrary = (provider): Web3 => {\n  return provider\n}\n","import { nodes } from \"./getRpcUrl\";\n\n// The user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\nexport const setupNetwork = async () => {\n  const provider = (window as WindowChain).ethereum\n  if (provider) {\n    const chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\n\n    try {\n      await provider.request({\n        method: \"wallet_addEthereumChain\",\n        params: [\n          {\n            chainId: `0x${chainId.toString(16)}`,\n            chainName: \"Matic\",\n            nativeCurrency: {\n              name: \"Matic\",\n              symbol: \"MATIC\",\n              decimals: 18,\n            },\n            rpcUrls: nodes,\n            blockExplorerUrls: [\n              \"https://polygon-explorer-mumbai.chainstacklabs.com\"\n            ],\n          },\n        ],\n      })\n\n      return true\n    } catch (error) {\n      console.error(error)\n      return false\n    }\n  } else {\n    console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\")\n    return false\n  }\n}\n\n/**\n * Prompt the user to add a custom token to metamask\n * @param tokenAddress\n * @param tokenSymbol\n * @param tokenDecimals\n * @param tokenImage\n * @returns {boolean} true if the token has been added, false otherwise\n */\nexport const registerToken = async (\n  tokenAddress: string,\n  tokenSymbol: string,\n  tokenDecimals: number,\n  tokenImage: string,\n) => {\n  const tokenAdded = await (window as WindowChain).ethereum.request({\n    method: \"wallet_watchAsset\",\n    params: {\n      type: \"ERC20\",\n      options: {\n        address: tokenAddress,\n        symbol: tokenSymbol,\n        decimals: tokenDecimals,\n        image: tokenImage,\n      },\n    },\n  })\n\n  return tokenAdded\n}\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { PriceApiResponse, PriceApiThunk, PriceState } from \"state/types\";\n\nconst initialState: PriceState = {\n  isLoading: false,\n  lastUpdated: null,\n  data: null,\n};\n\n// Thunks\nexport const fetchPrices = createAsyncThunk<PriceApiThunk>(\"prices/fetch\", async () => {\n  const response = await fetch(\"https://api.pancakeswap.info/api/v2/tokens\")\n  const data = (await response.json()) as PriceApiResponse\n\n  // Return normalized token names\n  return {\n    updated_at: data.updated_at,\n    data: Object.keys(data.data).reduce((accum, token) => {\n      return {\n        ...accum,\n        [token.toLowerCase()]: parseFloat(data.data[token].price),\n      }\n    }, {}),\n  }\n})\n\nexport const pricesSlice = createSlice({\n  name: \"prices\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchPrices.pending, (state) => {\n      state.isLoading = true\n    })\n    builder.addCase(fetchPrices.fulfilled, (state, action: PayloadAction<PriceApiThunk>) => {\n      state.isLoading = false\n      state.lastUpdated = action.payload.updated_at\n      state.data = action.payload.data\n    })\n  },\n})\n\nexport default pricesSlice.reducer\n","export default {\n  masterChef: {\n    56: \"\",\n    137: \"\",\n    80001: \"0x4793ef37ebC9f91eBB9416e85001dEe7d4A7Df9E\",\n  },\n  multiCall: {\n    56: \"\",\n    137: \"\",\n    80001: \"0x28D0696523281e9276b8e4546AE48dbBAa20e504\",\n  },\n  sousChef: {\n    56: \"\",\n    137: \"\",\n    80001: \"\",\n  },\n  lottery: {\n    56: \"\",\n    137: \"\",\n    80001: \"\",\n  },\n  lotteryNFT: {\n    56: \"\",\n    137: \"\",\n    80001: \"\",\n  },\n  pancakeProfile: {\n    56: \"\",\n    137: \"\",\n    80001: \"\",\n  },\n  pancakeRabbits: {\n    56: \"\",\n    137: \"\",\n    80001: \"\",\n  },\n  bunnyFactory: {\n    56: \"\",\n    137: \"\",\n    80001: \"\",\n  },\n  claimRefund: {\n    56: \"\",\n    137: \"\",\n    80001: \"\",\n  },\n  pointCenterIfo: {\n    56: \"\",\n    137: \"\",\n    80001: \"\",\n  },\n  bunnySpecial: {\n    56: \"\",\n    137: \"\",\n    80001: \"\",\n  },\n  tradingCompetition: {\n    56: \"\",\n    137: \"\",\n    80001: \"\",\n  },\n  easterNft: {\n    56: \"\",\n    137: \"\",\n    80001: \"\",\n  },\n  cakeVault: {\n    56: \"\",\n    137: \"\",\n    80001: \"\",\n  },\n  predictions: {\n    56: \"\",\n    137: \"\",\n    80001: \"\",\n  },\n  chainlinkOracle: {\n    56: \"\",\n    137: \"\",\n    80001: \"\",\n  },\n};\n","import addresses from \"config/constants/contracts\";\nimport tokens from \"config/constants/tokens\";\nimport { Address } from \"config/constants/types\";\n\nexport const getAddress = (address: Address): string => {\n  // return address[process.env.REACT_APP_CHAIN_ID];\n\n  // const mainNetChainId = 56\n  // const chainId = process.env.REACT_APP_CHAIN_ID\n  // return address[chainId] ? address[chainId] : address[mainNetChainId]\n\n  const mainNetChainId = 80001;\n  const chainId = process.env.REACT_APP_CHAIN_ID;\n  return address[chainId] ? address[chainId] : address[mainNetChainId];\n}\n\nexport const getCakeAddress = () => {\n  return getAddress(tokens.plasma.address)\n}\n\nexport const getMasterChefAddress = () => {\n  return getAddress(addresses.masterChef)\n}\n\nexport const getMulticallAddress = () => {\n  return getAddress(addresses.multiCall)\n}\n\nexport const getWbnbAddress = () => {\n  return getAddress(tokens.wbnb.address)\n}\n\nexport const getLotteryAddress = () => {\n  return getAddress(addresses.lottery)\n}\n\nexport const getLotteryTicketAddress = () => {\n  return getAddress(addresses.lotteryNFT)\n}\n\nexport const getPancakeProfileAddress = () => {\n  return getAddress(addresses.pancakeProfile)\n}\n\nexport const getPancakeRabbitsAddress = () => {\n  return getAddress(addresses.pancakeRabbits)\n}\n\nexport const getBunnyFactoryAddress = () => {\n  return getAddress(addresses.bunnyFactory)\n}\n\nexport const getClaimRefundAddress = () => {\n  return getAddress(addresses.claimRefund)\n}\n\nexport const getPointCenterIfoAddress = () => {\n  return getAddress(addresses.pointCenterIfo)\n}\n\nexport const getBunnySpecialAddress = () => {\n  return getAddress(addresses.bunnySpecial)\n}\n\nexport const getTradingCompetitionAddress = () => {\n  return getAddress(addresses.tradingCompetition)\n}\n\nexport const getEasterNftAddress = () => {\n  return getAddress(addresses.easterNft)\n}\n\nexport const getCakeVaultAddress = () => {\n  return getAddress(addresses.cakeVault)\n}\n\nexport const getPredictionsAddress = () => {\n  return getAddress(addresses.predictions)\n}\n\nexport const getChainlinkOracleAddress = () => {\n  return getAddress(addresses.chainlinkOracle)\n}\n","import React, { useState, useEffect } from \"react\";\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import styled from \"styled-components\";\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1200px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import React, { createContext, ReactNode, useCallback, useState } from \"react\";\nimport { kebabCase } from \"lodash\";\nimport { Toast, toastTypes } from \"@plasmaswap/uikit\";\nimport { ToastContextApi } from \"./types\";\n\nexport const ToastsContext = createContext<ToastContextApi>(undefined)\n\nexport const ToastsProvider: React.FC = ({ children }) => {\n  const [toasts, setToasts] = useState<ToastContextApi[\"toasts\"]>([])\n\n  const toast = useCallback(\n    ({ title, description, type }: Omit<Toast, \"id\">) => {\n      setToasts((prevToasts) => {\n        const id = kebabCase(title)\n\n        // Remove any existing toasts with the same id\n        const currentToasts = prevToasts.filter((prevToast) => prevToast.id !== id)\n\n        return [\n          {\n            id,\n            title,\n            description,\n            type,\n          },\n          ...currentToasts,\n        ]\n      })\n    },\n    [setToasts],\n  )\n\n  const toastError = (title: string, description?: ReactNode) => {\n    return toast({ title, description, type: toastTypes.DANGER })\n  }\n\n  const toastInfo = (title: string, description?: ReactNode) => {\n    return toast({ title, description, type: toastTypes.INFO })\n  }\n\n  const toastSuccess = (title: string, description?: ReactNode) => {\n    return toast({ title, description, type: toastTypes.SUCCESS })\n  }\n\n  const toastWarning = (title: string, description?: ReactNode) => {\n    return toast({ title, description, type: toastTypes.WARNING })\n  }\n\n  const clear = () => setToasts([])\n\n  const remove = (id: string) => {\n    setToasts((prevToasts) => prevToasts.filter((prevToast) => prevToast.id !== id))\n  }\n\n  return (\n    <ToastsContext.Provider value={{ toasts, clear, remove, toastError, toastInfo, toastSuccess, toastWarning }}>\n      {children}\n    </ToastsContext.Provider>\n  )\n}\n","export { default as farmsConfig } from \"./farms\";\nexport { default as poolsConfig } from \"./pools\";\n","import React from \"react\";\nimport { Button, useWalletModal } from \"@plasmaswap/uikit\";\nimport useAuth from \"hooks/useAuth\";\nimport { useTranslation } from \"contexts/Localization\";\n\nconst UnlockButton = (props) => {\n  const { t } = useTranslation()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {t(\"Unlock Wallet\")}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useCallback } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useAppDispatch } from \"state\";\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from \"state/actions\";\nimport { soushHarvest, soushHarvestBnb, harvest } from \"utils/callHelpers\";\nimport { useMasterchef, useSousChef } from \"./useContract\";\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvest(masterChefContract, sousId, account)\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import BigNumber from \"bignumber.js\";\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK } from \"config\";\n\n/**\n * Get the APR value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\n * @returns Null if the APR is NaN or infinite.\n */\nexport const getPoolApr = (\n  stakingTokenPrice: number,\n  rewardTokenPrice: number,\n  totalStaked: number,\n  tokenPerBlock: number,\n): number => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\n/**\n * Get farm APR value in %\n * @param poolWeight allocationPoint / totalAllocationPoint\n * @param cakePriceUsd Cake price in USD\n * @param poolLiquidityUsd Total pool liquidity in USD\n * @returns\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const getFarmApr = (poolWeight: BigNumber, cakePriceUsd: BigNumber, poolLiquidityUsd: BigNumber): number => {\n  const yearlyCakeRewardAllocation = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR).times(poolWeight)\n  // const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\n  const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(1).times(100)\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\nexport default null\n","import { useCallback } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Contract } from \"web3-eth-contract\";\nimport { ethers } from \"ethers\";\nimport { useAppDispatch } from \"state\";\nimport { updateUserAllowance, fetchFarmUserDataAsync } from \"state/actions\";\nimport { approve } from \"utils/callHelpers\";\nimport { useMasterchef, useCake, useSousChef, useLottery } from \"./useContract\";\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWeb3React()\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\n    return tx\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useCallback } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useAppDispatch } from \"state\";\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from \"state/actions\";\nimport { unstake, sousUnstake, sousEmergencyUnstake } from \"utils/callHelpers\";\nimport { useMasterchef, useSousChef } from \"./useContract\";\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      const txHash = await unstake(masterChefContract, sousId, amount, account)\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import BigNumber from \"bignumber.js\";\n\nexport const BIG_ZERO = new BigNumber(0)\nexport const BIG_TEN = new BigNumber(10)\n","import BigNumber from \"bignumber.js\";\nimport { BIG_TEN } from \"./bigNumber\";\n\nexport const getDecimalAmount = (amount: BigNumber, decimals = 18) => {\n  return new BigNumber(amount).times(BIG_TEN.pow(decimals))\n}\n\nexport const getBalanceAmount = (amount: BigNumber, decimals = 18) => {\n  return new BigNumber(amount).dividedBy(BIG_TEN.pow(decimals))\n}\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  return getBalanceAmount(balance, decimals).toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, decimalsToAppear?: number) => {\n  return getBalanceAmount(balance, decimals).toFixed(decimalsToAppear)\n}\n\nexport const formatNumber = (number: number, minPrecision = 2, maxPrecision = 2) => {\n  const options = {\n    minimumFractionDigits: minPrecision,\n    maximumFractionDigits: maxPrecision,\n  }\n\n  return number.toLocaleString(undefined, options)\n}\n","import Web3 from \"web3\";\nimport { AbiItem } from \"web3-utils\";\nimport web3NoAccount from \"utils/web3\";\nimport { poolsConfig } from \"config/constants\";\nimport { PoolCategory } from \"config/constants/types\";\n\n// Addresses\nimport {\n  getAddress,\n  getPancakeProfileAddress,\n  getPancakeRabbitsAddress,\n  getBunnyFactoryAddress,\n  getBunnySpecialAddress,\n  getCakeAddress,\n  getLotteryAddress,\n  getLotteryTicketAddress,\n  getMasterChefAddress,\n  getPointCenterIfoAddress,\n  getClaimRefundAddress,\n  getTradingCompetitionAddress,\n  getEasterNftAddress,\n  getCakeVaultAddress,\n  getPredictionsAddress,\n  getChainlinkOracleAddress,\n} from \"utils/addressHelpers\";\n\n// ABI\nimport profileABI from \"config/abi/pancakeProfile.json\";\nimport pancakeRabbitsAbi from \"config/abi/pancakeRabbits.json\";\nimport bunnyFactoryAbi from \"config/abi/bunnyFactory.json\";\nimport bunnySpecialAbi from \"config/abi/bunnySpecial.json\";\nimport bep20Abi from \"config/abi/erc20.json\";\nimport erc721Abi from \"config/abi/erc721.json\";\nimport lpTokenAbi from \"config/abi/lpToken.json\";\nimport cakeAbi from \"config/abi/cake.json\";\nimport ifoV1Abi from \"config/abi/ifoV1.json\";\nimport ifoV2Abi from \"config/abi/ifoV2.json\";\nimport pointCenterIfo from \"config/abi/pointCenterIfo.json\";\nimport lotteryAbi from \"config/abi/lottery.json\";\nimport lotteryTicketAbi from \"config/abi/lotteryNft.json\";\nimport masterChef from \"config/abi/masterchef.json\";\nimport sousChef from \"config/abi/sousChef.json\";\nimport sousChefV2 from \"config/abi/sousChefV2.json\";\nimport sousChefBnb from \"config/abi/sousChefBnb.json\";\nimport claimRefundAbi from \"config/abi/claimRefund.json\";\nimport tradingCompetitionAbi from \"config/abi/tradingCompetition.json\";\nimport easterNftAbi from \"config/abi/easterNft.json\";\nimport cakeVaultAbi from \"config/abi/cakeVault.json\";\nimport predictionsAbi from \"config/abi/predictions.json\";\nimport chainlinkOracleAbi from \"config/abi/chainlinkOracle.json\";\n\nconst getContract = (abi: any, address: string, web3?: Web3) => {\n  const _web3 = web3 ?? web3NoAccount\n  return new _web3.eth.Contract(abi as unknown as AbiItem, address)\n}\n\nexport const getBep20Contract = (address: string, web3?: Web3) => {\n  return getContract(bep20Abi, address, web3)\n}\n\nexport const getErc721Contract = (address: string, web3?: Web3) => {\n  return getContract(erc721Abi, address, web3)\n}\n\nexport const getLpContract = (address: string, web3?: Web3) => {\n  return getContract(lpTokenAbi, address, web3)\n}\n\nexport const getIfoV1Contract = (address: string, web3?: Web3) => {\n  return getContract(ifoV1Abi, address, web3)\n}\n\nexport const getIfoV2Contract = (address: string, web3?: Web3) => {\n  return getContract(ifoV2Abi, address, web3)\n}\n\nexport const getSouschefContract = (id: number, web3?: Web3) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const abi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  return getContract(abi, getAddress(config.contractAddress), web3)\n}\n\nexport const getSouschefV2Contract = (id: number, web3?: Web3) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  return getContract(sousChefV2, getAddress(config.contractAddress), web3)\n}\n\nexport const getPointCenterIfoContract = (web3?: Web3) => {\n  return getContract(pointCenterIfo, getPointCenterIfoAddress(), web3)\n}\n\nexport const getCakeContract = (web3?: Web3) => {\n  return getContract(cakeAbi, getCakeAddress(), web3)\n}\n\nexport const getProfileContract = (web3?: Web3) => {\n  return getContract(profileABI, getPancakeProfileAddress(), web3)\n}\n\nexport const getPancakeRabbitContract = (web3?: Web3) => {\n  return getContract(pancakeRabbitsAbi, getPancakeRabbitsAddress(), web3)\n}\n\nexport const getBunnyFactoryContract = (web3?: Web3) => {\n  return getContract(bunnyFactoryAbi, getBunnyFactoryAddress(), web3)\n}\n\nexport const getBunnySpecialContract = (web3?: Web3) => {\n  return getContract(bunnySpecialAbi, getBunnySpecialAddress(), web3)\n}\n\nexport const getLotteryContract = (web3?: Web3) => {\n  return getContract(lotteryAbi, getLotteryAddress(), web3)\n}\n\nexport const getLotteryTicketContract = (web3?: Web3) => {\n  return getContract(lotteryTicketAbi, getLotteryTicketAddress(), web3)\n}\n\nexport const getMasterchefContract = (web3?: Web3) => {\n  return getContract(masterChef, getMasterChefAddress(), web3)\n}\n\nexport const getClaimRefundContract = (web3?: Web3) => {\n  return getContract(claimRefundAbi, getClaimRefundAddress(), web3)\n}\n\nexport const getTradingCompetitionContract = (web3?: Web3) => {\n  return getContract(tradingCompetitionAbi, getTradingCompetitionAddress(), web3)\n}\n\nexport const getEasterNftContract = (web3?: Web3) => {\n  return getContract(easterNftAbi, getEasterNftAddress(), web3)\n}\n\nexport const getCakeVaultContract = (web3?: Web3) => {\n  return getContract(cakeVaultAbi, getCakeVaultAddress(), web3)\n}\n\nexport const getPredictionsContract = (web3?: Web3) => {\n  return getContract(predictionsAbi, getPredictionsAddress(), web3)\n}\n\nexport const getChainlinkOracleContract = (web3?: Web3) => {\n  return getContract(chainlinkOracleAbi, getChainlinkOracleAddress(), web3)\n}\n","const ARCHIVED_FARMS_START_PID = 139;\nconst ARCHIVED_FARMS_END_PID = 250;\nconst isArchivedPid = (pid: number) => pid >= ARCHIVED_FARMS_START_PID && pid <= ARCHIVED_FARMS_END_PID;\nexport default isArchivedPid;\n","import { useEffect, useState } from \"react\";\n\nconst usePersistState = (initialValue: any, localStorageKey: string) => {\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? JSON.parse(valueFromLS) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(value))\n  }, [value, localStorageKey])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","import styled from \"styled-components\";\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Box } from \"@plasmaswap/uikit\";\nimport Container from \"../layout/Container\";\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","export const tokenEarnedPerThousandDollarsCompounding = ({\n  numberOfDays,\n  farmApr,\n  tokenPrice,\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\n  const timesCompounded = 365 * compoundFrequency\n\n  // We use decimal values rather than % in the math for both APY and the number of days being calculated as a proportion of the year\n  let aprAsDecimal = farmApr / 100\n\n  if (performanceFee) {\n    // Reduce the APR by the % performance fee\n    const feeRelativeToApr = (farmApr / 100) * performanceFee\n    const aprAfterFee = farmApr - feeRelativeToApr\n    aprAsDecimal = aprAfterFee / 100\n  }\n\n  const daysAsDecimalOfYear = numberOfDays / 365\n\n  // Calculate the starting TOKEN balance with a dollar balance of $1000.\n  const principal = 1000 / tokenPrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\n  const interestEarned = finalAmount - principal\n\n  return parseFloat(interestEarned.toFixed(roundingDecimals))\n}\n\nexport const getRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Modal, Text, LinkExternal, Flex, Box } from \"@plasmaswap/uikit\";\nimport { useTranslation } from \"contexts/Localization\";\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from \"utils/compoundApyHelpers\";\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  tokenPrice: number\n  apr: number\n  linkLabel: string\n  linkHref: string\n  earningTokenSymbol?: string\n  roundingDecimals?: number\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: \"10px\";\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  tokenPrice,\n  apr,\n  linkLabel,\n  linkHref,\n  earningTokenSymbol = \"PLASMA\",\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\n\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 1,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 7,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 30,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 365,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {t(\"Timeframe\")}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {t(\"ROI\")}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {earningTokenSymbol} {t(\"per\")} $1000\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand30D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand365D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Box mb=\"28px\" maxWidth=\"280px\">\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t(\n            `Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.`,\n            { freq: compoundFrequency.toLocaleString() },\n          )}\n        </Text>\n        {performanceFee > 0 && (\n          <Text mt=\"14px\" fontSize=\"12px\" color=\"textSubtle\">\n            {t(`All estimated rates take into account this pool's %fee%% performance fee`, { fee: performanceFee })}\n          </Text>\n        )}\n      </Box>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from \"./farms\";\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  fetchCakeVaultPublicData,\n  fetchCakeVaultUserData,\n  fetchCakeVaultFees,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from \"./pools\";\nexport { profileFetchStart, profileFetchSucceeded, profileFetchFailed } from \"./profile\";\nexport { setBlock } from \"./block\";\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { useDispatch } from \"react-redux\";\nimport farmsReducer from \"./farms\";\nimport poolsReducer from \"./pools\";\nimport pricesReducer from \"./prices\";\nimport profileReducer from \"./profile\";\nimport blockReducer from \"./block\";\n\nconst store = configureStore({\n  devTools: process.env.NODE_ENV !== \"production\",\n  reducer: {\n    block: blockReducer,\n    farms: farmsReducer,\n    pools: poolsReducer,\n    prices: pricesReducer,\n    profile: profileReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport default store;\n","import { useEffect, useState, useRef } from \"react\";\nimport Web3 from \"web3\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { getWeb3NoAccount } from \"utils/web3\";\n\n// Provides a web3 instance using the provider provided by useWallet with a fallback of an httpProver\n// Recreate web3 instance only if the provider change\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : getWeb3NoAccount())\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : getWeb3NoAccount())\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import BigNumber from \"bignumber.js/bignumber\";\nimport { BIG_TEN } from \"utils/bigNumber\";\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const BSC_BLOCK_TIME = 3;\nexport const CAKE_PER_BLOCK = new BigNumber(40);\nexport const BLOCKS_PER_YEAR = new BigNumber((60 / BSC_BLOCK_TIME) * 60 * 24 * 365); // 10512000\nexport const BASE_URL = \"https://plasticsolutionsllc.github.io\";\nexport const BASE_EXCHANGE_URL = \"https://papersolution.github.io\";\nexport const BASE_ADD_LIQUIDITY_URL = `${BASE_EXCHANGE_URL}/#/add`;\nexport const BASE_LIQUIDITY_POOL_URL = `${BASE_EXCHANGE_URL}/#/pool`;\nexport const BASE_BSC_SCAN_URL = \"https://bscscan.com\";\nexport const LOTTERY_MAX_NUMBER_OF_TICKETS = 50;\nexport const LOTTERY_TICKET_PRICE = 1;\nexport const DEFAULT_TOKEN_DECIMAL = BIG_TEN.pow(18);\n","import { useMemo } from \"react\";\nimport useWeb3 from \"hooks/useWeb3\";\nimport { getBep20Contract, getCakeContract, getBunnyFactoryContract, getBunnySpecialContract, getPancakeRabbitContract, getProfileContract, getIfoV1Contract, getIfoV2Contract, getLotteryContract, getLotteryTicketContract, getMasterchefContract, getPointCenterIfoContract, getSouschefContract, getClaimRefundContract, getTradingCompetitionContract, getEasterNftContract, getErc721Contract, getCakeVaultContract, getPredictionsContract, getChainlinkOracleContract, getSouschefV2Contract } from \"utils/contractHelpers\";\n\nexport const useIfoV1Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\n}\n\nexport const useIfoV2Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\n}\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useCake = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n\nexport const useBunnyFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\n}\n\nexport const usePancakeRabbits = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\n}\n\nexport const useProfile = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getProfileContract(web3), [web3])\n}\n\nexport const useLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryContract(web3), [web3])\n}\n\nexport const useLotteryTicket = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\n}\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const useSousChef = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\n}\n\nexport const useSousChefV2 = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\n}\n\nexport const usePointCenterIfoContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\n}\n\nexport const useBunnySpecialContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\n}\n\nexport const useClaimRefundContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getClaimRefundContract(web3), [web3])\n}\n\nexport const useTradingCompetitionContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\n}\n\nexport const useEasterNftContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getEasterNftContract(web3), [web3])\n}\n\nexport const useCakeVaultContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeVaultContract(web3), [web3])\n}\n\nexport const usePredictionsContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPredictionsContract(web3), [web3])\n}\n\nexport const useChainlinkOracleContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\n}\n","import BigNumber from \"bignumber.js\";\nimport { CampaignType, FarmConfig, Nft, PoolConfig, Team } from \"config/constants/types\";\n\nexport type TranslatableText = | string | {\n  key: string\n  data?: {\n    [key: string]: string | number\n  }\n}\n\nexport interface Farm extends FarmConfig {\n  tokenAmount?: BigNumber\n  quoteTokenAmount?: BigNumber\n  lpTotalInQuoteToken?: BigNumber\n  lpTotalSupply?: BigNumber\n  tokenPriceVsQuote?: BigNumber\n  poolWeight?: BigNumber\n  userData?: {\n    allowance: string\n    tokenBalance: string\n    stakedBalance: string\n    earnings: string\n    nextHarvest: string\n  }\n}\n\nexport interface Pool extends PoolConfig {\n  allocPoint?: string\n  canHarvest?: boolean\n  totalStaked?: BigNumber\n  stakingLimit?: BigNumber\n  startBlock?: number\n  endBlock?: number\n  userData?: {\n    allowance: BigNumber\n    stakingTokenBalance: BigNumber\n    stakedBalance: BigNumber\n    pendingReward: BigNumber\n    nextHarvest: BigNumber\n  }\n}\n\nexport interface Profile {\n  userId: number\n  points: number\n  teamId: number\n  nftAddress: string\n  tokenId: number\n  isActive: boolean\n  username: string\n  nft?: Nft\n  team: Team\n  hasRegistered: boolean\n}\n\n// Slices states\n\nexport interface FarmsState {\n  data: Farm[]\n  loadArchivedFarmsData: boolean\n  userDataLoaded: boolean\n}\n\nexport interface VaultFees {\n  performanceFee: number\n  callFee: number\n  withdrawalFee: number\n  withdrawalFeePeriod: number\n}\n\nexport interface VaultUser {\n  isLoading: boolean\n  userShares: string\n  cakeAtLastUserAction: string\n  lastDepositedTime: string\n  lastUserActionTime: string\n}\n\nexport interface CakeVault {\n  totalShares?: string\n  pricePerFullShare?: string\n  totalCakeInVault?: string\n  estimatedCakeBountyReward?: string\n  totalPendingCakeHarvest?: string\n  fees?: VaultFees\n  userData?: VaultUser\n}\n\nexport interface PoolsState {\n  data: Pool[]\n  cakeVault: CakeVault\n}\n\nexport interface ProfileState {\n  isInitialized: boolean\n  isLoading: boolean\n  hasRegistered: boolean\n  data: Profile\n}\n\nexport type TeamResponse = {\n  0: string\n  1: string\n  2: string\n  3: string\n  4: boolean\n}\n\nexport type TeamsById = {\n  [key: string]: Team\n}\n\nexport interface TeamsState {\n  isInitialized: boolean\n  isLoading: boolean\n  data: TeamsById\n}\n\nexport interface Achievement {\n  id: string\n  type: CampaignType\n  address: string\n  title: TranslatableText\n  description?: TranslatableText\n  badge: string\n  points: number\n}\n\nexport interface AchievementState {\n  data: Achievement[]\n}\n\n// API Price State\nexport interface PriceApiList {\n  /* eslint-disable camelcase */\n  [key: string]: {\n    name: string\n    symbol: string\n    price: string\n    price_BNB: string\n  }\n}\n\nexport interface PriceApiListThunk {\n  /* eslint-disable camelcase */\n  [key: string]: number\n}\n\nexport interface PriceApiResponse {\n  /* eslint-disable camelcase */\n  updated_at: string\n  data: PriceApiList\n}\n\nexport interface PriceApiThunk {\n  /* eslint-disable camelcase */\n  updated_at: string\n  data: PriceApiListThunk\n}\n\nexport interface PriceState {\n  isLoading: boolean\n  lastUpdated: string\n  data: PriceApiListThunk\n}\n\n// Block\n\nexport interface BlockState {\n  currentBlock: number\n  initialBlock: number\n}\n\n// Collectibles\n\nexport interface CollectiblesState {\n  isInitialized: boolean\n  isLoading: boolean\n  data: {\n    [key: string]: number[]\n  }\n}\n\n// Predictions\n\nexport enum BetPosition {\n  BULL = \"Bull\",\n  BEAR = \"Bear\",\n  HOUSE = \"House\",\n}\n\nexport enum PredictionStatus {\n  INITIAL = \"initial\",\n  LIVE = \"live\",\n  PAUSED = \"paused\",\n  ERROR = \"error\",\n}\n\nexport interface Round {\n  id: string\n  epoch: number\n  failed?: boolean\n  startBlock: number\n  startAt: number\n  lockAt: number\n  lockBlock: number\n  lockPrice: number\n  endBlock: number\n  closePrice: number\n  totalBets: number\n  totalAmount: number\n  bullBets: number\n  bearBets: number\n  bearAmount: number\n  bullAmount: number\n  position: BetPosition\n  bets?: Bet[]\n}\n\nexport interface Market {\n  id: string\n  paused: boolean\n  epoch: number\n}\n\nexport interface Bet {\n  id?: string\n  hash?: string\n  amount: number\n  position: BetPosition\n  claimed: boolean\n  user?: PredictionUser\n  round: Round\n}\n\nexport interface PredictionUser {\n  id: string\n  address: string\n  block: number\n  totalBets: number\n  totalBNB: number\n}\n\nexport interface RoundData {\n  [key: string]: Round\n}\n\nexport interface HistoryData {\n  [key: string]: Bet[]\n}\n\nexport interface BetData {\n  [key: string]: {\n    [key: string]: Bet\n  }\n}\n\nexport enum HistoryFilter {\n  ALL = \"all\",\n  COLLECTED = \"collected\",\n  UNCOLLECTED = \"uncollected\",\n}\n\nexport interface PredictionsState {\n  status: PredictionStatus\n  isLoading: boolean\n  isHistoryPaneOpen: boolean\n  isChartPaneOpen: boolean\n  isFetchingHistory: boolean\n  historyFilter: HistoryFilter\n  currentEpoch: number\n  currentRoundStartBlockNumber: number\n  intervalBlocks: number\n  bufferBlocks: number\n  minBetAmount: string\n  lastOraclePrice: string\n  rounds: RoundData\n  history: HistoryData\n  bets: BetData\n}\n\n// Global state\n\nexport interface State {\n  achievements: AchievementState\n  block: BlockState\n  farms: FarmsState\n  prices: PriceState\n  pools: PoolsState\n  predictions: PredictionsState\n  profile: ProfileState\n  teams: TeamsState\n  collectibles: CollectiblesState\n}\n","import { Bet, BetPosition, Market, PredictionStatus, Round, RoundData } from \"state/types\";\nimport makeBatchRequest from \"utils/makeBatchRequest\";\nimport { getPredictionsContract } from \"utils/contractHelpers\";\nimport { BetResponse, RoundResponse, MarketResponse } from \"./queries\";\n\nexport enum Result {\n  WIN = \"win\",\n  LOSE = \"lose\",\n  CANCELED = \"canceled\",\n  LIVE = \"live\",\n}\n\nexport const numberOrNull = (value: string) => {\n  if (value === null) {\n    return null\n  }\n\n  const valueNum = Number(value)\n  return Number.isNaN(valueNum) ? null : valueNum\n}\n\nexport const makeFutureRoundResponse = (epoch: number, startBlock: number): RoundResponse => {\n  return {\n    id: epoch.toString(),\n    epoch: epoch.toString(),\n    startBlock: startBlock.toString(),\n    failed: null,\n    startAt: null,\n    lockAt: null,\n    lockBlock: null,\n    lockPrice: null,\n    endBlock: null,\n    closePrice: null,\n    totalBets: '0',\n    totalAmount: '0',\n    bearBets: '0',\n    bullBets: '0',\n    bearAmount: '0',\n    bullAmount: '0',\n    position: null,\n    bets: [],\n  }\n}\n\nexport const transformBetResponse = (betResponse: BetResponse): Bet => {\n  const bet = {\n    id: betResponse.id,\n    hash: betResponse.hash,\n    amount: betResponse.amount ? parseFloat(betResponse.amount) : 0,\n    position: betResponse.position === 'Bull' ? BetPosition.BULL : BetPosition.BEAR,\n    claimed: betResponse.claimed,\n    user: {\n      id: betResponse.user.id,\n      address: betResponse.user.address,\n      block: numberOrNull(betResponse.user.block),\n      totalBets: numberOrNull(betResponse.user.totalBets),\n      totalBNB: numberOrNull(betResponse.user.totalBNB),\n    },\n  } as Bet\n\n  if (betResponse.round) {\n    bet.round = transformRoundResponse(betResponse.round)\n  }\n\n  return bet\n}\n\nexport const transformRoundResponse = (roundResponse: RoundResponse): Round => {\n  const {\n    id,\n    epoch,\n    failed,\n    startBlock,\n    startAt,\n    lockAt,\n    lockBlock,\n    lockPrice,\n    endBlock,\n    closePrice,\n    totalBets,\n    totalAmount,\n    bullBets,\n    bearBets,\n    bearAmount,\n    bullAmount,\n    position,\n    bets = [],\n  } = roundResponse\n\n  const getRoundPosition = (positionResponse: string) => {\n    if (positionResponse === 'Bull') {\n      return BetPosition.BULL\n    }\n\n    if (positionResponse === 'Bear') {\n      return BetPosition.BEAR\n    }\n\n    return null\n  }\n\n  return {\n    id,\n    failed,\n    epoch: numberOrNull(epoch),\n    startBlock: numberOrNull(startBlock),\n    startAt: numberOrNull(startAt),\n    lockAt: numberOrNull(lockAt),\n    lockBlock: numberOrNull(lockBlock),\n    lockPrice: lockPrice ? parseFloat(lockPrice) : null,\n    endBlock: numberOrNull(endBlock),\n    closePrice: closePrice ? parseFloat(closePrice) : null,\n    totalBets: numberOrNull(totalBets),\n    totalAmount: totalAmount ? parseFloat(totalAmount) : 0,\n    bullBets: numberOrNull(bullBets),\n    bearBets: numberOrNull(bearBets),\n    bearAmount: numberOrNull(bearAmount),\n    bullAmount: numberOrNull(bullAmount),\n    position: getRoundPosition(position),\n    bets: bets.map(transformBetResponse),\n  }\n}\n\nexport const transformMarketResponse = (marketResponse: MarketResponse): Market => {\n  return {\n    id: marketResponse.id,\n    paused: marketResponse.paused,\n    epoch: Number(marketResponse.epoch.epoch),\n  }\n}\n\nexport const makeRoundData = (rounds: Round[]): RoundData => {\n  return rounds.reduce((accum, round) => {\n    return {\n      ...accum,\n      [round.id]: round,\n    }\n  }, {})\n}\n\nexport const getRoundResult = (bet: Bet, currentEpoch: number): Result => {\n  const { round } = bet\n  if (round.failed) {\n    return Result.CANCELED\n  }\n\n  if (round.epoch >= currentEpoch - 1) {\n    return Result.LIVE\n  }\n  const roundResultPosition = round.closePrice > round.lockPrice ? BetPosition.BULL : BetPosition.BEAR\n\n  return bet.position === roundResultPosition ? Result.WIN : Result.LOSE\n}\n\nexport const getCanClaim = (bet: Bet) => {\n  return !bet.claimed && (bet.position === bet.round.position || bet.round.failed === true)\n}\n\nexport const getUnclaimedWinningBets = (bets: Bet[]): Bet[] => {\n  return bets.filter(getCanClaim)\n}\n\nexport const getStaticPredictionsData = async () => {\n  const { methods } = getPredictionsContract()\n  const [currentEpoch, intervalBlocks, minBetAmount, isPaused, bufferBlocks] = await makeBatchRequest([\n    methods.currentEpoch().call,\n    methods.intervalBlocks().call,\n    methods.minBetAmount().call,\n    methods.paused().call,\n    methods.bufferBlocks().call,\n  ])\n\n  return {\n    status: isPaused ? PredictionStatus.PAUSED : PredictionStatus.LIVE,\n    currentEpoch: Number(currentEpoch),\n    intervalBlocks: Number(intervalBlocks),\n    bufferBlocks: Number(bufferBlocks),\n    minBetAmount,\n  }\n}\n","import BigNumber from \"bignumber.js\";\nimport { Pool } from \"state/types\";\nimport { BIG_ZERO } from \"utils/bigNumber\";\n\ntype UserData =\n  | Pool[\"userData\"]\n  | {\n      allowance: number | string\n      stakingTokenBalance: number | string\n      stakedBalance: number | string\n      pendingReward: number | string\n      nextHarvest: number | string\n    }\n\nexport const transformUserData = (userData: UserData) => {\n  return {\n    allowance: userData ? new BigNumber(userData.allowance) : BIG_ZERO,\n    stakingTokenBalance: userData ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO,\n    stakedBalance: userData ? new BigNumber(userData.stakedBalance) : BIG_ZERO,\n    pendingReward: userData ? new BigNumber(userData.pendingReward) : BIG_ZERO,\n    nextHarvest: userData ? new BigNumber(userData.nextHarvest) : BIG_ZERO,\n  }\n}\n\nexport const transformPool = (pool: Pool): Pool => {\n  const { totalStaked, stakingLimit, userData, ...rest } = pool\n\n  return {\n    ...rest,\n    userData: transformUserData(userData),\n    totalStaked: new BigNumber(totalStaked),\n    stakingLimit: new BigNumber(stakingLimit),\n  } as Pool\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { useEffect, useMemo } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useSelector } from \"react-redux\";\nimport { useAppDispatch } from \"state\";\nimport { orderBy } from \"lodash\";\nimport { getWeb3NoAccount } from \"utils/web3\";\nimport { getAddress } from \"utils/addressHelpers\";\nimport { getBalanceNumber } from \"utils/formatBalance\";\nimport { BIG_ZERO } from \"utils/bigNumber\";\nimport useRefresh from \"hooks/useRefresh\";\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync, fetchCakeVaultPublicData, fetchCakeVaultUserData, fetchCakeVaultFees, setBlock } from \"./actions\";\nimport { State, Farm, Pool, ProfileState, PriceState, FarmsState } from \"./types\";\nimport { fetchProfile } from \"./profile\";\nimport { fetchPrices } from \"./prices\";\nimport { getCanClaim } from \"./predictions/helpers\";\nimport { transformPool } from \"./pools/helpers\";\n// import { fetchPoolsStakingLimitsAsync } from \"./pools\";\n\nexport const useFetchPublicData = () => {\n  const dispatch = useAppDispatch();\n  const { slowRefresh } = useRefresh();\n  const { account } = useWeb3React();\n  const address = account || \"0x0000000000000000000000000000000000000000\";\n\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync(address))\n    dispatch(fetchPoolsPublicDataAsync(address))\n    // dispatch(fetchPoolsStakingLimitsAsync())\n  }, [dispatch, slowRefresh, address])\n\n  useEffect(() => {\n    const web3 = getWeb3NoAccount()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      dispatch(setBlock(blockNumber))\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [dispatch])\n}\n\n// Farms\n\nexport const useFarms = (): FarmsState => {\n  const farms = useSelector((state: State) => state.farms)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO,\n  }\n}\n\nexport const useLpTokenPrice = (symbol: string) => {\n  const farm = useFarmFromSymbol(symbol)\n  const tokenPriceInUsd = useGetApiPrice(getAddress(farm.token.address))\n\n  return farm.lpTotalSupply && farm.lpTotalInQuoteToken\n    ? new BigNumber(getBalanceNumber(farm.lpTotalSupply)).div(farm.lpTotalInQuoteToken).times(tokenPriceInUsd).times(2)\n    : BIG_ZERO\n}\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools.map(transformPool)\n}\n\nexport const usePoolFromPid = (sousId: number): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return transformPool(pool)\n}\n\nexport const useFetchCakeVault = () => {\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultPublicData())\n  }, [dispatch, fastRefresh])\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultUserData({ account }))\n  }, [dispatch, fastRefresh, account])\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultFees())\n  }, [dispatch])\n}\n\nexport const useCakeVault = () => {\n  const {\n    totalShares: totalSharesAsString,\n    pricePerFullShare: pricePerFullShareAsString,\n    totalCakeInVault: totalCakeInVaultAsString,\n    estimatedCakeBountyReward: estimatedCakeBountyRewardAsString,\n    totalPendingCakeHarvest: totalPendingCakeHarvestAsString,\n    fees: { performanceFee, callFee, withdrawalFee, withdrawalFeePeriod },\n    userData: {\n      isLoading,\n      userShares: userSharesAsString,\n      cakeAtLastUserAction: cakeAtLastUserActionAsString,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  } = useSelector((state: State) => state.pools.cakeVault)\n\n  const estimatedCakeBountyReward = useMemo(() => {\n    return new BigNumber(estimatedCakeBountyRewardAsString)\n  }, [estimatedCakeBountyRewardAsString])\n\n  const totalShares = new BigNumber(totalSharesAsString)\n  const pricePerFullShare = new BigNumber(pricePerFullShareAsString)\n  const totalPendingCakeHarvest = new BigNumber(totalPendingCakeHarvestAsString)\n  const totalCakeInVault = new BigNumber(totalCakeInVaultAsString)\n  const userShares = new BigNumber(userSharesAsString)\n  const cakeAtLastUserAction = new BigNumber(cakeAtLastUserActionAsString)\n\n  return {\n    totalShares,\n    pricePerFullShare,\n    totalCakeInVault,\n    estimatedCakeBountyReward,\n    totalPendingCakeHarvest,\n    fees: {\n      performanceFee,\n      callFee,\n      withdrawalFee,\n      withdrawalFeePeriod,\n    },\n    userData: {\n      isLoading,\n      userShares,\n      cakeAtLastUserAction,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  }\n}\n\n// Profile\n\nexport const useFetchProfile = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchProfile(account))\n  }, [account, dispatch])\n}\n\nexport const useProfile = () => {\n  const { isInitialized, isLoading, data, hasRegistered }: ProfileState = useSelector((state: State) => state.profile)\n  return { profile: data, hasProfile: isInitialized && hasRegistered, isInitialized, isLoading }\n}\n\n// Prices\nexport const useFetchPriceList = () => {\n  const { slowRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchPrices())\n  }, [dispatch, slowRefresh])\n}\n\nexport const useGetApiPrices = () => {\n  const prices: PriceState[\"data\"] = useSelector((state: State) => state.prices.data)\n  return prices\n}\n\nexport const useGetApiPrice = (address: string) => {\n  // Special case for PLASMA\n  if (address === \"0xddF507a5355E6fB7356bc4370600286d5A5b26af\") {\n    return usePriceCakeBusd().toNumber();\n  }\n\n  const prices = useGetApiPrices();\n\n  if (!prices) {\n    return null;\n  }\n\n  return prices[address.toLowerCase()];\n}\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  return new BigNumber(1);\n  const bnbBusdFarm = useFarmFromPid(1);\n  return bnbBusdFarm.tokenPriceVsQuote ? new BigNumber(1).div(bnbBusdFarm.tokenPriceVsQuote) : BIG_ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  return new BigNumber(0.01);\n\n  // TODO: UPDATE THIS AFTER THE PLASMA-BNB FARM IS ADDED!\n  const cakeBnbFarm = useFarmFromPid(1);\n\n  const bnbBusdPrice = usePriceBnbBusd();\n  const cakeBusdPrice = cakeBnbFarm.tokenPriceVsQuote ? bnbBusdPrice.times(cakeBnbFarm.tokenPriceVsQuote) : BIG_ZERO;\n  return cakeBusdPrice.div(100);\n}\n\n// Block\nexport const useBlock = () => {\n  return useSelector((state: State) => state.block)\n}\n\nexport const useInitialBlock = () => {\n  return useSelector((state: State) => state.block.initialBlock)\n}\n\n// Predictions\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\n}\n\nexport const useGetRounds = () => {\n  return useSelector((state: State) => state.predictions.rounds)\n}\n\nexport const useGetSortedRounds = () => {\n  const roundData = useGetRounds()\n  return orderBy(Object.values(roundData), [\"epoch\"], [\"asc\"])\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: State) => state.predictions.currentEpoch)\n}\n\nexport const useGetIntervalBlocks = () => {\n  return useSelector((state: State) => state.predictions.intervalBlocks)\n}\n\nexport const useGetBufferBlocks = () => {\n  return useSelector((state: State) => state.predictions.bufferBlocks)\n}\n\nexport const useGetTotalIntervalBlocks = () => {\n  const intervalBlocks = useGetIntervalBlocks()\n  const bufferBlocks = useGetBufferBlocks()\n  return intervalBlocks + bufferBlocks\n}\n\nexport const useGetRound = (id: string) => {\n  const rounds = useGetRounds()\n  return rounds[id]\n}\n\nexport const useGetCurrentRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  return rounds.find((round) => round.epoch === currentEpoch)\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: State) => state.predictions.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: State) => state.predictions.historyFilter)\n}\n\nexport const useGetCurrentRoundBlockNumber = () => {\n  return useSelector((state: State) => state.predictions.currentRoundStartBlockNumber)\n}\n\nexport const useGetMinBetAmount = () => {\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\n  return useMemo(() => new BigNumber(minBetAmount), [minBetAmount])\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: State) => state.predictions.history)\n}\n\nexport const useGetHistoryByAccount = (account: string) => {\n  const bets = useGetHistory()\n  return bets ? bets[account] : []\n}\n\nexport const useGetBetByRoundId = (account: string, roundId: string) => {\n  const bets = useSelector((state: State) => state.predictions.bets)\n\n  if (!bets[account]) {\n    return null\n  }\n\n  if (!bets[account][roundId]) {\n    return null\n  }\n\n  return bets[account][roundId]\n}\n\nexport const useBetCanClaim = (account: string, roundId: string) => {\n  const bet = useGetBetByRoundId(account, roundId)\n\n  if (!bet) {\n    return false\n  }\n\n  return getCanClaim(bet)\n}\n\nexport const useGetLastOraclePrice = (): BigNumber => {\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\n  return new BigNumber(lastOraclePrice)\n}\n","import { EN } from \"../../config/localization/languages\";\n\nconst publicUrl = process.env.PUBLIC_URL\nexport const LS_KEY = \"pancakeswap_language\"\n\nexport const fetchLocale = async (locale) => {\n  const response = await fetch(`${publicUrl}/locales/${locale}.json`)\n  const data = await response.json()\n  return data\n}\n\nexport const getLanguageCodeFromLS = () => {\n  try {\n    const codeFromStorage = localStorage.getItem(LS_KEY)\n\n    return codeFromStorage || EN.locale\n  } catch {\n    return EN.locale\n  }\n}\n","import React, { createContext, useCallback, useEffect, useState } from \"react\";\nimport { Language } from \"@plasmaswap/uikit\";\nimport { EN, languages } from \"../../config/localization/languages\";\nimport translations from \"../../config/localization/translations.json\";\nimport { ContextApi, ContextData, ProviderState } from \"./types\";\nimport { LS_KEY, fetchLocale, getLanguageCodeFromLS } from \"./helpers\";\n\nconst initialState: ProviderState = {\n  isFetching: true,\n  currentLanguage: EN,\n}\n\n// Export the translations directly\nexport const languageMap = new Map<Language[\"locale\"], Record<string, string>>()\nlanguageMap.set(EN.locale, translations)\n\nexport const LanguageContext = createContext<ContextApi>(undefined)\n\nexport const LanguageProvider: React.FC = ({ children }) => {\n  const [state, setState] = useState<ProviderState>(() => {\n    const codeFromStorage = getLanguageCodeFromLS()\n\n    return {\n      ...initialState,\n      currentLanguage: languages[codeFromStorage],\n    }\n  })\n  const { currentLanguage } = state\n\n  useEffect(() => {\n    const fetchInitialLocales = async () => {\n      const codeFromStorage = getLanguageCodeFromLS()\n\n      if (codeFromStorage !== EN.locale) {\n        const enLocale = languageMap.get(EN.locale)\n        const currentLocale = await fetchLocale(codeFromStorage)\n        languageMap.set(codeFromStorage, { ...enLocale, ...currentLocale })\n      }\n\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: false,\n      }))\n    }\n\n    fetchInitialLocales()\n  }, [setState])\n\n  const setLanguage = async (language: Language) => {\n    if (!languageMap.has(language.locale)) {\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: true,\n      }))\n\n      const locale = await fetchLocale(language.locale)\n      const enLocale = languageMap.get(EN.locale)\n\n      // Merge the EN locale to ensure that any locale fetched has all the keys\n      languageMap.set(language.locale, { ...enLocale, ...locale })\n      localStorage.setItem(LS_KEY, language.locale)\n\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: false,\n        currentLanguage: language,\n      }))\n    } else {\n      localStorage.setItem(LS_KEY, language.locale)\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: false,\n        currentLanguage: language,\n      }))\n    }\n  }\n\n  const translate = useCallback(\n    (key: string, data?: ContextData) => {\n      const translationSet = languageMap.has(currentLanguage.locale)\n        ? languageMap.get(currentLanguage.locale)\n        : languageMap.get(EN.locale)\n      const translatedText = translationSet[key] || key\n\n      // Check the existence of at least one combination of %%, separated by 1 or more non space characters\n      const includesVariable = translatedText.match(/%\\S+?%/gm)\n\n      if (includesVariable && data) {\n        let interpolatedText = translatedText\n        Object.keys(data).forEach((dataKey) => {\n          const templateKey = new RegExp(`%${dataKey}%`, \"g\")\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey].toString())\n        })\n\n        return interpolatedText\n      }\n\n      return translatedText\n    },\n    [currentLanguage],\n  )\n\n  return <LanguageContext.Provider value={{ ...state, setLanguage, t: translate }}>{children}</LanguageContext.Provider>\n}\n","import { useContext } from \"react\";\nimport { LanguageContext } from \"./Provider\";\n\nconst useTranslation = () => {\n  const languageContext = useContext(LanguageContext)\n\n  if (languageContext === undefined) {\n    throw new Error(\"Language context is undefined\")\n  }\n\n  return languageContext\n}\n\nexport default useTranslation\n","import { AbiItem } from \"web3-utils\";\nimport { Interface } from \"@ethersproject/abi\";\nimport { getWeb3NoAccount } from \"utils/web3\";\nimport MultiCallAbi from \"config/abi/Multicall.json\";\nimport { getMulticallAddress } from \"utils/addressHelpers\";\n\ninterface Call {\n  address: string\n  name: string\n  params?: any[]\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3NoAccount();\n  const multi = new web3.eth.Contract(MultiCallAbi as unknown as AbiItem, getMulticallAddress());\n  const itf = new Interface(abi);\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)]);\n  const { returnData } = await multi.methods.aggregate(calldata).call();\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call));\n\n  return res;\n}\n\nexport default multicall;\n","const tokens = {\n  bnb: {\n    symbol: \"BNB\",\n    projectLink: \"https://www.binance.com/\",\n  },\n  plasma: { // Plasma\n    symbol: \"PLASMA\",\n    address: {\n      56: \"\",\n      137: \"\",\n      80001: \"0xddF507a5355E6fB7356bc4370600286d5A5b26af\",\n    },\n    decimals: 18,\n    projectLink: \"https://plasticsolutionsllc.github.io/\",\n  },\n  matic: { // Matic (Wrapped)\n    symbol: \"wMATIC\",\n    address: {\n      56: \"\",\n      137: \"\",\n      80001: \"0x2685f9b4b5ca4692d5386cc553523803905d59e9\",\n    },\n    decimals: 18,\n    projectLink: \"https://polygon.technology/\",\n  },\n  wbnb: { // Binance Coin (Wrapped)\n    symbol: \"wBNB\",\n    address: {\n      56: \"\",\n      137: \"\",\n      80001: \"0xaBD194769869BdA2913dE05Ac043b58a53C3846E\",\n    },\n    decimals: 18,\n    projectLink: \"https://www.binance.com/\",\n  },\n  btc: { // Bitcoin\n    symbol: \"BTC\",\n    address: {\n      56: \"\",\n      137: \"\",\n      80001: \"0xBA907705Be902Fb11b7A51eb462e5bB7946a856C\",\n    },\n    decimals: 18,\n    projectLink: \"https://bitcoin.org/\",\n  },\n  ltc: { // Litecoin\n    symbol: \"LTC\",\n    address: {\n      56: \"\",\n      137: \"\",\n      80001: \"0x8d3e4Ca4Cbff8aCf0DB017baA9cc37B46bDAAaBe\",\n    },\n    decimals: 18,\n    projectLink: \"https://litecoin.org/\",\n  },\n  eth: { // Ethereum\n    symbol: \"ETH\",\n    address: {\n      56: \"\",\n      137: \"\",\n      80001: \"0xd9074EcdA6680cA6AFd8120669A8DeC2339065bc\",\n    },\n    decimals: 18,\n    projectLink: \"https://ethereum.org/en/\",\n  },\n  busd: { // Binance USD\n    symbol: \"BUSD\",\n    address: {\n      56: \"\",\n      137: \"\",\n      80001: \"0xA15a812ae6BBF1C717dA1CF898AeE7d0441D71e7\",\n    },\n    decimals: 18,\n    projectLink: \"https://www.paxos.com/busd/\",\n  },\n  usdc: { // USD Coin\n    symbol: \"USDC\",\n    address: {\n      56: \"\",\n      137: \"\",\n      80001: \"0x4ed910CfDBE283F7a1A067830A997BBa5C3ED699\",\n    },\n    decimals: 18,\n    projectLink: \"https://www.centre.io/usdc\",\n  },\n  usdt: { // Tether\n    symbol: \"USDT\",\n    address: {\n      56: \"\",\n      137: \"\",\n      80001: \"0x5AEC45cC364A6E6a09Deb41B868A58F159E9a210\",\n    },\n    decimals: 18,\n    projectLink: \"https://tether.to/\",\n  },\n  dai: { // Dai\n    symbol: \"DAI\",\n    address: {\n      56: \"\",\n      137: \"\",\n      80001: \"0x575524745a41aAA86a99cAE48481B80dec84af98\",\n    },\n    decimals: 18,\n    projectLink: \"https://tether.to/\",\n  },\n  cake: { // PancakeSwap\n    symbol: \"CAKE\",\n    address: {\n      56: \"\",\n      137: \"\",\n      80001: \"0x1E439cd878dA3846fE85A18c958e19b2105ea352\",\n    },\n    decimals: 18,\n    projectLink: \"https://pancakeswap.finance/\",\n  },\n  ada: { // Cardano\n    symbol: \"ADA\",\n    address: {\n      56: \"\",\n      137: \"\",\n      80001: \"0xf94358856676371692660B8832656dc104B67077\",\n    },\n    decimals: 18,\n    projectLink: \"https://cardano.org/\",\n  },\n  link: { // Chainlink\n    symbol: \"LINK\",\n    address: {\n      56: \"\",\n      137: \"\",\n      80001: \"0xF618870138aEb1A0efEa00cCf4253dcef1344DbB\",\n    },\n    decimals: 18,\n    projectLink: \"https://chain.link/\",\n  }\n};\n\nexport default tokens;\n","import tokens from \"./tokens\";\nimport { PoolConfig, PoolCategory } from \"./types\";\n\nconst MASTER_CHEF_CONTRACT_ADDRESS_BSC = \"\";\nconst MASTER_CHEF_CONTRACT_ADDRESS_MATIC = \"\";\nconst MASTER_CHEF_CONTRACT_ADDRESS_MATIC_TEST = \"0x4793ef37ebC9f91eBB9416e85001dEe7d4A7Df9E\";\n\nconst pools: PoolConfig[] = [\n  {\n    // PLASMA-PLASMA\n    sousId: 0,\n    stakingToken: tokens.plasma,\n    earningToken: tokens.plasma,\n    harvestLockup: \"2 hours\",\n    contractAddress: {\n      56: MASTER_CHEF_CONTRACT_ADDRESS_BSC,\n      137: MASTER_CHEF_CONTRACT_ADDRESS_MATIC,\n      80001: MASTER_CHEF_CONTRACT_ADDRESS_MATIC_TEST,\n    },\n    tokenPerBlock: \"100\",\n    sortOrder: 1,\n    isFinished: false,\n    harvest: true,\n    poolCategory: PoolCategory.CORE,\n  },\n  {\n    // MATIC-PLASMA\n    sousId: 3,\n    stakingToken: tokens.matic,\n    earningToken: tokens.plasma,\n    harvestLockup: \"2 hours\",\n    contractAddress: {\n      56: MASTER_CHEF_CONTRACT_ADDRESS_BSC,\n      137: MASTER_CHEF_CONTRACT_ADDRESS_MATIC,\n      80001: MASTER_CHEF_CONTRACT_ADDRESS_MATIC_TEST,\n    },\n    tokenPerBlock: \"100\",\n    sortOrder: 1,\n    isFinished: false,\n    harvest: true,\n    poolCategory: PoolCategory.CORE,\n  },\n  {\n    // BNB-PLASMA\n    sousId: 4,\n    stakingToken: tokens.wbnb,\n    earningToken: tokens.plasma,\n    harvestLockup: \"2 hours\",\n    contractAddress: {\n      56: MASTER_CHEF_CONTRACT_ADDRESS_BSC,\n      137: MASTER_CHEF_CONTRACT_ADDRESS_MATIC,\n      80001: MASTER_CHEF_CONTRACT_ADDRESS_MATIC_TEST,\n    },\n    tokenPerBlock: \"100\",\n    sortOrder: 1,\n    isFinished: false,\n    harvest: true,\n    poolCategory: PoolCategory.CORE,\n  },\n  // {\n  //   // BTC-PLASMA\n  //   sousId: 5,\n  //   stakingToken: tokens.btc,\n  //   earningToken: tokens.plasma,\n  //   harvestLockup: \"2 hours\",\n  //   contractAddress: {\n  //     56: MASTER_CHEF_CONTRACT_ADDRESS_BSC,\n  //     137: MASTER_CHEF_CONTRACT_ADDRESS_MATIC,\n  //     80001: MASTER_CHEF_CONTRACT_ADDRESS_MATIC_TEST,\n  //   },\n  //   tokenPerBlock: \"100\",\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   harvest: true,\n  //   poolCategory: PoolCategory.CORE,\n  // },\n  // {\n  //   // LTC-PLASMA\n  //   sousId: 6,\n  //   stakingToken: tokens.ltc,\n  //   earningToken: tokens.plasma,\n  //   harvestLockup: \"2 hours\",\n  //   contractAddress: {\n  //     56: MASTER_CHEF_CONTRACT_ADDRESS_BSC,\n  //     137: MASTER_CHEF_CONTRACT_ADDRESS_MATIC,\n  //     80001: MASTER_CHEF_CONTRACT_ADDRESS_MATIC_TEST,\n  //   },\n  //   tokenPerBlock: \"100\",\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   harvest: true,\n  //   poolCategory: PoolCategory.CORE,\n  // },\n  // {\n  //   // ETH-PLASMA\n  //   sousId: 7,\n  //   stakingToken: tokens.eth,\n  //   earningToken: tokens.plasma,\n  //   harvestLockup: \"2 hours\",\n  //   contractAddress: {\n  //     56: MASTER_CHEF_CONTRACT_ADDRESS_BSC,\n  //     137: MASTER_CHEF_CONTRACT_ADDRESS_MATIC,\n  //     80001: MASTER_CHEF_CONTRACT_ADDRESS_MATIC_TEST,\n  //   },\n  //   tokenPerBlock: \"100\",\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   harvest: true,\n  //   poolCategory: PoolCategory.CORE,\n  // },\n  // {\n  //   // BUSD-PLASMA\n  //   sousId: 10,\n  //   stakingToken: tokens.busd,\n  //   earningToken: tokens.plasma,\n  //   harvestLockup: \"2 hours\",\n  //   contractAddress: {\n  //     56: MASTER_CHEF_CONTRACT_ADDRESS_BSC,\n  //     137: MASTER_CHEF_CONTRACT_ADDRESS_MATIC,\n  //     80001: MASTER_CHEF_CONTRACT_ADDRESS_MATIC_TEST,\n  //   },\n  //   tokenPerBlock: \"100\",\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   harvest: true,\n  //   poolCategory: PoolCategory.CORE,\n  // },\n  // {\n  //   // USDC-PLASMA\n  //   sousId: 11,\n  //   stakingToken: tokens.usdc,\n  //   earningToken: tokens.plasma,\n  //   harvestLockup: \"2 hours\",\n  //   contractAddress: {\n  //     56: MASTER_CHEF_CONTRACT_ADDRESS_BSC,\n  //     137: MASTER_CHEF_CONTRACT_ADDRESS_MATIC,\n  //     80001: MASTER_CHEF_CONTRACT_ADDRESS_MATIC_TEST,\n  //   },\n  //   tokenPerBlock: \"100\",\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   harvest: true,\n  //   poolCategory: PoolCategory.CORE,\n  // },\n  // {\n  //   // USDT-PLASMA\n  //   sousId: 12,\n  //   stakingToken: tokens.usdt,\n  //   earningToken: tokens.plasma,\n  //   harvestLockup: \"2 hours\",\n  //   contractAddress: {\n  //     56: MASTER_CHEF_CONTRACT_ADDRESS_BSC,\n  //     137: MASTER_CHEF_CONTRACT_ADDRESS_MATIC,\n  //     80001: MASTER_CHEF_CONTRACT_ADDRESS_MATIC_TEST,\n  //   },\n  //   tokenPerBlock: \"100\",\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   harvest: true,\n  //   poolCategory: PoolCategory.CORE,\n  // },\n  // {\n  //   // DAI-PLASMA\n  //   sousId: 13,\n  //   stakingToken: tokens.dai,\n  //   earningToken: tokens.plasma,\n  //   harvestLockup: \"2 hours\",\n  //   contractAddress: {\n  //     56: MASTER_CHEF_CONTRACT_ADDRESS_BSC,\n  //     137: MASTER_CHEF_CONTRACT_ADDRESS_MATIC,\n  //     80001: MASTER_CHEF_CONTRACT_ADDRESS_MATIC_TEST,\n  //   },\n  //   tokenPerBlock: \"100\",\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   harvest: true,\n  //   poolCategory: PoolCategory.CORE,\n  // },\n  // {\n  //   // CAKE-PLASMA\n  //   sousId: 14,\n  //   stakingToken: tokens.cake,\n  //   earningToken: tokens.plasma,\n  //   harvestLockup: \"2 hours\",\n  //   contractAddress: {\n  //     56: MASTER_CHEF_CONTRACT_ADDRESS_BSC,\n  //     137: MASTER_CHEF_CONTRACT_ADDRESS_MATIC,\n  //     80001: MASTER_CHEF_CONTRACT_ADDRESS_MATIC_TEST,\n  //   },\n  //   tokenPerBlock: \"100\",\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   harvest: true,\n  //   poolCategory: PoolCategory.CORE,\n  // },\n  // {\n  //   // ADA-PLASMA\n  //   sousId: 15,\n  //   stakingToken: tokens.ada,\n  //   earningToken: tokens.plasma,\n  //   harvestLockup: \"2 hours\",\n  //   contractAddress: {\n  //     56: MASTER_CHEF_CONTRACT_ADDRESS_BSC,\n  //     137: MASTER_CHEF_CONTRACT_ADDRESS_MATIC,\n  //     80001: MASTER_CHEF_CONTRACT_ADDRESS_MATIC_TEST,\n  //   },\n  //   tokenPerBlock: \"100\",\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   harvest: true,\n  //   poolCategory: PoolCategory.CORE,\n  // },\n  // {\n  //   // LINK-PLASMA\n  //   sousId: 16,\n  //   stakingToken: tokens.link,\n  //   earningToken: tokens.plasma,\n  //   harvestLockup: \"2 hours\",\n  //   contractAddress: {\n  //     56: MASTER_CHEF_CONTRACT_ADDRESS_BSC,\n  //     137: MASTER_CHEF_CONTRACT_ADDRESS_MATIC,\n  //     80001: MASTER_CHEF_CONTRACT_ADDRESS_MATIC_TEST,\n  //   },\n  //   tokenPerBlock: \"100\",\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   harvest: true,\n  //   poolCategory: PoolCategory.CORE,\n  // },\n];\n\nexport default pools;\n","import BigNumber from \"bignumber.js\";\nimport { DEFAULT_TOKEN_DECIMAL } from \"config\";\nimport { ethers } from \"ethers\";\nimport { BIG_TEN, BIG_ZERO } from \"./bigNumber\";\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  let referrer = \"0x0000000000000000000000000000000000000000\";\n\n  if (document.cookie.indexOf(\"refer=\") !== -1) {\n    const START = document.cookie.indexOf(\"refer=\") + 6;\n    const END = document.cookie.substring(START).indexOf(\";\");\n\n    if (END === -1) {\n      referrer = document.cookie.substring(START);\n    } else {\n      referrer = document.cookie.substring(START).substring(0, END);\n    }\n  }\n\n  return masterChefContract.methods.deposit(\n    pid,                                                           // uint256 _pid\n    new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(), // uint256 _amount\n    referrer                                                       // address _referrer\n  )\n  .send({ from: account, gas: 250000 })\n  .on(\"transactionHash\", (tx) => {\n    return tx.transactionHash\n  });\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: 250000 })\n    .on(\"transactionHash\", (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: 250000, value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString() })\n    .on(\"transactionHash\", (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: 250000 })\n    .on(\"transactionHash\", (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: 250000 })\n    .on(\"transactionHash\", (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on(\"transactionHash\", (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  let referrer = \"0x0000000000000000000000000000000000000000\";\n\n  if (document.cookie.indexOf(\"refer=\") !== -1) {\n    const START = document.cookie.indexOf(\"refer=\") + 6;\n    const END = document.cookie.substring(START).indexOf(\";\");\n\n    if (END === -1) {\n      referrer = document.cookie.substring(START);\n    } else {\n      referrer = document.cookie.substring(START).substring(0, END);\n    }\n  }\n\n  return masterChefContract.methods\n    .deposit(\n      pid,     // uint256 _pid\n      \"0\",     // uint256 _amount\n      referrer // address _referrer\n    )\n    .send({ from: account, gas: 250000 })\n    .on(\"transactionHash\", (tx) => {\n      return tx.transactionHash\n    });\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit(\"0\")\n    .send({ from: account, gas: 250000 })\n    .on(\"transactionHash\", (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: 250000, value: BIG_ZERO })\n    .on(\"transactionHash\", (tx) => {\n      return tx.transactionHash\n    })\n}\n","import Web3 from \"web3\";\nimport { HttpProviderOptions } from \"web3-core-helpers\";\nimport getRpcUrl from \"utils/getRpcUrl\";\n\nconst RPC_URL = getRpcUrl();\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions);\nconst web3NoAccount = new Web3(httpProvider);\n\nconst getWeb3NoAccount = () => {\n  return web3NoAccount;\n};\n\nexport { getWeb3NoAccount };\nexport default web3NoAccount;\n","import { Language } from \"@plasmaswap/uikit\";\n\nexport const AR: Language = { locale: \"ar-SA\", language: \"العربية\", code: \"ar\" }\nexport const EN: Language = { locale: \"en-US\", language: \"English\", code: \"en\" }\nexport const DE: Language = { locale: \"de-DE\", language: \"Deutsch\", code: \"de\" }\nexport const EL: Language = { locale: \"el-GR\", language: \"Ελληνικά\", code: \"el\" }\nexport const ESES: Language = { locale: \"es-ES\", language: \"Español\", code: \"es-ES\" }\nexport const FI: Language = { locale: \"fi-FI\", language: \"Suomalainen\", code: \"fi\" }\nexport const FIL: Language = { locale: \"fil-PH\", language: \"Filipino\", code: \"fil\" }\nexport const FR: Language = { locale: \"fr-FR\", language: \"Français\", code: \"fr\" }\nexport const HI: Language = { locale: \"hi-IN\", language: \"हिंदी\", code: \"hi\" }\nexport const HU: Language = { locale: \"hu-HU\", language: \"Magyar\", code: \"hu\" }\nexport const ID: Language = { locale: \"id-ID\", language: \"Bahasa Indonesia\", code: \"id\" }\nexport const IT: Language = { locale: \"it-IT\", language: \"Italiano\", code: \"it\" }\nexport const JA: Language = { locale: \"ja-JP\", language: \"日本語\", code: \"ja\" }\nexport const KO: Language = { locale: \"ko-KR\", language: \"한국어\", code: \"ko\" }\nexport const NL: Language = { locale: \"nl-NL\", language: \"Nederlands\", code: \"nl\" }\nexport const PTBR: Language = { locale: \"pt-BR\", language: \"Português (Brazil)\", code: \"pt-br\" }\nexport const RO: Language = { locale: \"ro-RO\", language: \"Română\", code: \"ro\" }\nexport const RU: Language = { locale: \"ru-RU\", language: \"Русский\", code: \"ru\" }\nexport const SVSE: Language = { locale: \"sv-SE\", language: \"Svenska\", code: \"sv\" }\nexport const TA: Language = { locale: \"ta-IN\", language: \"தமிழ்\", code: \"ta\" }\nexport const TR: Language = { locale: \"tr-TR\", language: \"Türkçe\", code: \"tr\" }\nexport const UK: Language = { locale: \"uk-UA\", language: \"Українська\", code: \"uk\" }\nexport const VI: Language = { locale: \"vi-VN\", language: \"Tiếng Việt\", code: \"vi\" }\nexport const ZHCN: Language = { locale: \"zh-CN\", language: \"简体中文\", code: \"zh-cn\" }\nexport const ZHTW: Language = { locale: \"zh-TW\", language: \"繁體中文\", code: \"zh-tw\" }\n\nexport const languages = {\n  \"ar-SA\": AR,\n  \"en-US\": EN,\n  \"de-DE\": DE,\n  \"el-GR\": EL,\n  \"es-ES\": ESES,\n  \"fi-FI\": FI,\n  \"fil-PH\": FIL,\n  \"fr-FR\": FR,\n  \"hi-IN\": HI,\n  \"hu-HU\": HU,\n  \"id-ID\": ID,\n  \"it-IT\": IT,\n  \"ja-JP\": JA,\n  \"ko-KR\": KO,\n  \"nl-NL\": NL,\n  \"pt-BR\": PTBR,\n  \"ro-RO\": RO,\n  \"ru-RU\": RU,\n  \"sv-SE\": SVSE,\n  \"ta-IN\": TA,\n  \"tr-TR\": TR,\n  \"uk-UA\": UK,\n  \"vi-VN\": VI,\n  \"zh-CN\": ZHCN,\n  \"zh-TW\": ZHTW,\n}\n\nexport const languageList = Object.values(languages)\n","import BigNumber from \"bignumber.js\";\nimport poolsConfig from \"config/constants/pools\";\nimport sousChefABI from \"config/abi/sousChef.json\";\nimport cakeABI from \"config/abi/cake.json\";\nimport multicall from \"utils/multicall\";\nimport masterchefABI from \"config/abi/masterchef.json\";\nimport { getAddress, getMasterChefAddress } from \"utils/addressHelpers\";\nimport { BIG_ZERO } from \"utils/bigNumber\";\nimport { getSouschefV2Contract } from \"utils/contractHelpers\";\n\nexport const fetchPoolsBlockLimits = async () => {\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\n  const callsStartBlock = poolsWithEnd.map((poolConfig) => {\n    return {\n      address: getAddress(poolConfig.contractAddress),\n      name: \"startBlock\",\n    }\n  })\n  const callsEndBlock = poolsWithEnd.map((poolConfig) => {\n    return {\n      address: getAddress(poolConfig.contractAddress),\n      name: \"bonusEndBlock\",\n    }\n  })\n\n  const starts = await multicall(sousChefABI, callsStartBlock)\n  const ends = await multicall(sousChefABI, callsEndBlock)\n\n  return poolsWithEnd.map((cakePoolConfig, index) => {\n    const startBlock = starts[index]\n    const endBlock = ends[index]\n    return {\n      sousId: cakePoolConfig.sousId,\n      startBlock: new BigNumber(startBlock).toJSON(),\n      endBlock: new BigNumber(endBlock).toJSON(),\n    }\n  })\n}\n\nexport const fetchPoolsTotalStaking = async (address: string) => {\n  const nonBnbPools = poolsConfig.filter((p) => p.stakingToken.symbol !== \"BNB\");\n  const callCakeABI = nonBnbPools.map((pool) => {\n    return {\n      name: \"balanceOf\",\n      address: getAddress(pool.stakingToken.address),\n      params: [getAddress(pool.contractAddress)]\n    };\n  });\n  const a = await multicall(cakeABI, callCakeABI);\n  const b = a.map((input) => {\n    return {\n      totalStaked: new BigNumber(input).toJSON()\n    };\n  });\n\n  const callMasterChefABI1 = nonBnbPools.map((pool) => {\n    return {\n      address: getMasterChefAddress(),\n      name: \"pools\",\n      params: [pool.sousId]\n    };\n  });\n\n  const callMasterChefABI2 = nonBnbPools.map((pool) => {\n    return {\n      name: \"canHarvest\",\n      address: getMasterChefAddress(),\n      params: [pool.sousId, address]\n    };\n  });\n\n  const c = await multicall(masterchefABI, callMasterChefABI1);\n  const d = await multicall(masterchefABI, callMasterChefABI2);\n  const e = c.map((input) => {return {allocPoint: new BigNumber(input.allocPoint._hex).toJSON()};});\n  const f = d.map((input) => {return {canHarvest: input.canHarvest};});\n  const data = [];\n\n  for (let i = 0; i < nonBnbPools.length; i++) {\n    const { sousId } = nonBnbPools[i];\n\n    data.push({\n      sousId,\n      totalStaked: b[i].totalStaked,\n      allocPoint: e[i].allocPoint,\n      canHarvest: f[i].canHarvest\n    });\n  }\n\n  return data;\n}\n\nexport const fetchPoolsTotalStakingPrev = async () => {\n  const nonBnbPools = poolsConfig.filter((p) => p.stakingToken.symbol !== \"BNB\")\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\n    return {\n      address: getAddress(poolConfig.stakingToken.address),\n      name: \"balanceOf\",\n      params: [getAddress(poolConfig.contractAddress)],\n    }\n  })\n\n  const nonBnbPoolsTotalStaked = await multicall(cakeABI, callsNonBnbPools)\n\n  return [\n    ...nonBnbPools.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\n    }))\n  ]\n}\n\nexport const fetchPoolStakingLimit = async (sousId: number): Promise<BigNumber> => {\n  try {\n    const sousContract = getSouschefV2Contract(sousId)\n    const stakingLimit = await sousContract.methods.poolLimitPerUser().call()\n    return new BigNumber(stakingLimit)\n  } catch (error) {\n    return BIG_ZERO\n  }\n}\n\nexport const fetchPoolsStakingLimits = async (poolsWithStakingLimit: number[]): Promise<{ [key: string]: BigNumber }> => {\n  const validPools = poolsConfig\n    .filter((p) => p.stakingToken.symbol !== \"BNB\" && !p.isFinished)\n    .filter((p) => !poolsWithStakingLimit.includes(p.sousId))\n\n  const stakingLimitPromises = validPools.map((validPool) => fetchPoolStakingLimit(validPool.sousId))\n  const stakingLimits = await Promise.all(stakingLimitPromises)\n\n  return stakingLimits.reduce((accum, stakingLimit, index) => {\n    return {\n      ...accum,\n      [validPools[index].sousId]: stakingLimit,\n    }\n  }, {})\n}\n","/* eslint-disable no-await-in-loop */\nimport { AbiItem } from \"web3-utils\";\nimport poolsConfig from \"config/constants/pools\";\nimport masterChefABI from \"config/abi/masterchef.json\";\nimport erc20ABI from \"config/abi/erc20.json\";\nimport multicall from \"utils/multicall\";\nimport { getAddress, getMasterChefAddress } from \"utils/addressHelpers\";\nimport { getWeb3NoAccount } from \"utils/web3\";\nimport BigNumber from \"bignumber.js\";\n\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingToken.symbol !== \"BNB\")\nconst bnbPools = poolsConfig.filter((p) => p.stakingToken.symbol === \"BNB\")\nconst web3 = getWeb3NoAccount()\nconst masterChefContract = new web3.eth.Contract(masterChefABI as unknown as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: getAddress(p.stakingToken.address),\n    name: \"allowance\",\n    params: [account, getAddress(p.contractAddress)],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: getAddress(p.stakingToken.address),\n    name: \"balanceOf\",\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const returnObj = {};\n\n  for (let i = 0; i < nonBnbPools.length; i++) {\n    const { sousId } = nonBnbPools[i];\n    const {\n      amount: masterPoolAmount,\n      nextHarvestUntil\n      } = await masterChefContract.methods.users(sousId, account).call();\n\n    returnObj[sousId] = {\n      stakedBalance: new BigNumber(masterPoolAmount).toJSON(),\n      nextHarvest: new BigNumber(nextHarvestUntil).toJSON()\n    };\n  }\n\n  return returnObj;\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const returnObj = {};\n\n  for (let i = 0; i < nonBnbPools.length; i++) {\n    const { sousId } = nonBnbPools[i];\n    const pendingReward = await masterChefContract.methods.pendingTokens(sousId, account).call();\n    returnObj[sousId] = new BigNumber(pendingReward).toJSON();\n  }\n\n  return returnObj;\n}\n","import BigNumber from 'bignumber.js'\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance'\n\nexport const convertSharesToCake = (\n  shares: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound)\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\n}\n\nexport const convertCakeToShares = (\n  cake: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber))\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals)\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals)\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound)\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance }\n}\n","import BigNumber from \"bignumber.js\";\nimport { convertSharesToCake } from \"views/Pools/helpers\";\nimport { getCakeVaultContract } from \"utils/contractHelpers\";\nimport makeBatchRequest from \"utils/makeBatchRequest\";\n\nconst cakeVaultContract = getCakeVaultContract()\n\nexport const fetchPublicVaultData = async () => {\n  try {\n    const [sharePrice, shares, estimatedCakeBountyReward, totalPendingCakeHarvest] = await makeBatchRequest([\n      cakeVaultContract.methods.getPricePerFullShare().call,\n      cakeVaultContract.methods.totalShares().call,\n      cakeVaultContract.methods.calculateHarvestCakeRewards().call,\n      cakeVaultContract.methods.calculateTotalPendingCakeRewards().call,\n    ])\n    const totalSharesAsBigNumber = new BigNumber(shares as string)\n    const sharePriceAsBigNumber = new BigNumber(sharePrice as string)\n    const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber)\n    return {\n      totalShares: totalSharesAsBigNumber.toJSON(),\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\n      totalCakeInVault: totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),\n      estimatedCakeBountyReward: new BigNumber(estimatedCakeBountyReward as string).toJSON(),\n      totalPendingCakeHarvest: new BigNumber(totalPendingCakeHarvest as string).toJSON(),\n    }\n  } catch (error) {\n    return {\n      totalShares: null,\n      pricePerFullShare: null,\n      totalCakeInVault: null,\n      estimatedCakeBountyReward: null,\n      totalPendingCakeHarvest: null,\n    }\n  }\n}\n\nexport const fetchVaultFees = async () => {\n  try {\n    const [performanceFee, callFee, withdrawalFee, withdrawalFeePeriod] = await makeBatchRequest([\n      cakeVaultContract.methods.performanceFee().call,\n      cakeVaultContract.methods.callFee().call,\n      cakeVaultContract.methods.withdrawFee().call,\n      cakeVaultContract.methods.withdrawFeePeriod().call,\n    ])\n    return {\n      performanceFee: parseInt(performanceFee as string, 10),\n      callFee: parseInt(callFee as string, 10),\n      withdrawalFee: parseInt(withdrawalFee as string, 10),\n      withdrawalFeePeriod: parseInt(withdrawalFeePeriod as string, 10),\n    }\n  } catch (error) {\n    return {\n      performanceFee: null,\n      callFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null,\n    }\n  }\n}\n\nexport default fetchPublicVaultData\n","import BigNumber from \"bignumber.js\";\nimport { getCakeVaultContract } from \"utils/contractHelpers\";\n\nconst cakeVaultContract = getCakeVaultContract()\n\nconst fetchVaultUser = async (account: string) => {\n  try {\n    const userContractResponse = await cakeVaultContract.methods.users(account).call()\n    return {\n      isLoading: false,\n      userShares: new BigNumber(userContractResponse.shares).toJSON(),\n      lastDepositedTime: userContractResponse.lastDepositedTime as string,\n      lastUserActionTime: userContractResponse.lastUserActionTime as string,\n      cakeAtLastUserAction: new BigNumber(userContractResponse.cakeAtLastUserAction).toJSON(),\n    }\n  } catch (error) {\n    return {\n      isLoading: true,\n      userShares: null,\n      lastDepositedTime: null,\n      lastUserActionTime: null,\n      cakeAtLastUserAction: null,\n    }\n  }\n}\n\nexport default fetchVaultUser\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport poolsConfig from \"config/constants/pools\";\nimport { BIG_ZERO } from \"utils/bigNumber\";\nimport { PoolsState, Pool, CakeVault, VaultFees, VaultUser } from \"state/types\";\nimport { fetchPoolsStakingLimits, fetchPoolsTotalStaking } from \"./fetchPools\";\nimport { fetchPoolsAllowance, fetchUserBalances, fetchUserStakeBalances, fetchUserPendingRewards } from \"./fetchPoolsUser\";\nimport { fetchPublicVaultData, fetchVaultFees } from \"./fetchVaultPublic\";\nimport fetchVaultUser from \"./fetchVaultUser\";\n\nconst initialState: PoolsState = {\n  data: [...poolsConfig],\n  cakeVault: {\n    totalShares: null,\n    pricePerFullShare: null,\n    totalCakeInVault: null,\n    estimatedCakeBountyReward: null,\n    totalPendingCakeHarvest: null,\n    fees: {\n      performanceFee: null,\n      callFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null,\n    },\n    userData: {\n      isLoading: true,\n      userShares: null,\n      cakeAtLastUserAction: null,\n      lastDepositedTime: null,\n      lastUserActionTime: null,\n    },\n  },\n}\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = (address: string) => async (dispatch) => {\n  const totalStakings = await fetchPoolsTotalStaking(address)\n\n  const liveData = poolsConfig.map((pool) => {\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n\n    return {\n      ...totalStaking\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsStakingLimitsAsync = () => async (dispatch, getState) => {\n  const poolsWithStakingLimit = getState()\n    .pools.data.filter(({ stakingLimit }) => stakingLimit !== null && stakingLimit !== undefined)\n    .map((pool) => pool.sousId)\n\n  const stakingLimits = await fetchPoolsStakingLimits(poolsWithStakingLimit)\n\n  const stakingLimitData = poolsConfig.map((pool) => {\n    if (poolsWithStakingLimit.includes(pool.sousId)) {\n      return { sousId: pool.sousId }\n    }\n    const stakingLimit = stakingLimits[pool.sousId] || BIG_ZERO\n    return {\n      sousId: pool.sousId,\n      stakingLimit: stakingLimit.toJSON(),\n    }\n  })\n\n  dispatch(setPoolsPublicData(stakingLimitData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId].stakedBalance,\n    nextHarvest: stakedBalances[pool.sousId].nextHarvest,\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: number, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: \"allowance\", value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: number, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: \"stakingTokenBalance\", value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: number, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: \"stakedBalance\", value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: number, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: \"pendingReward\", value: pendingRewards[sousId] }))\n}\n\nexport const fetchCakeVaultPublicData = createAsyncThunk<CakeVault>(\"cakeVault/fetchPublicData\", async () => {\n  const publicVaultInfo = await fetchPublicVaultData()\n  return publicVaultInfo\n})\n\nexport const fetchCakeVaultFees = createAsyncThunk<VaultFees>(\"cakeVault/fetchFees\", async () => {\n  const vaultFees = await fetchVaultFees()\n  return vaultFees\n})\n\nexport const fetchCakeVaultUserData = createAsyncThunk<VaultUser, { account: string }>(\n  \"cakeVault/fetchUser\",\n  async ({ account }) => {\n    const userData = await fetchVaultUser(account)\n    return userData\n  },\n)\n\nexport const PoolsSlice = createSlice({\n  name: \"Pools\",\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n\n      if (index >= 0) {\n        state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    // Vault public data that updates frequently\n    builder.addCase(fetchCakeVaultPublicData.fulfilled, (state, action: PayloadAction<CakeVault>) => {\n      state.cakeVault = { ...state.cakeVault, ...action.payload }\n    })\n    // Vault fees\n    builder.addCase(fetchCakeVaultFees.fulfilled, (state, action: PayloadAction<VaultFees>) => {\n      const fees = action.payload\n      state.cakeVault = { ...state.cakeVault, fees }\n    })\n    // Vault user data\n    builder.addCase(fetchCakeVaultUserData.fulfilled, (state, action: PayloadAction<VaultUser>) => {\n      const userData = action.payload\n      userData.isLoading = false\n      state.cakeVault = { ...state.cakeVault, userData }\n    })\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\nexport default PoolsSlice.reducer\n","import { useEffect } from \"react\";\nimport { connectorLocalStorageKey, ConnectorNames } from \"@plasmaswap/uikit\";\nimport useAuth from \"hooks/useAuth\";\n\nconst _binanceChainListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, \"BinanceChain\", {\n      get() {\n        return this.bsc;\n      },\n      set(bsc) {\n        this.bsc = bsc;\n        resolve();\n      },\n    }),\n  );\n\nconst useEagerConnect = () => {\n  const { login } = useAuth()\n\n  useEffect(() => {\n    const connectorId = window.localStorage.getItem(connectorLocalStorageKey) as ConnectorNames\n\n    if (connectorId) {\n      const isConnectorBinanceChain = connectorId === ConnectorNames.BSC\n      const isBinanceChainDefined = Reflect.has(window, \"BinanceChain\")\n\n      // Currently BSC extension doesn't always inject in time.\n      // We must check to see if it exists, and if not, wait for it before proceeding.\n      if (isConnectorBinanceChain && !isBinanceChainDefined) {\n        _binanceChainListener().then(() => login(connectorId))\n\n        return\n      }\n\n      login(connectorId)\n    }\n  }, [login])\n}\n\nexport default useEagerConnect\n","import { createGlobalStyle } from \"styled-components\"\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from \"@plasmaswap/uikit/dist/theme\"\n\ndeclare module \"styled-components\" {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","import React, { useState } from \"react\";\nimport { ThemeProvider as SCThemeProvider } from \"styled-components\";\nimport { light, dark } from \"@plasmaswap/uikit\";\n\nconst CACHE_KEY = \"IS_DARK\"\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { useContext } from \"react\";\nimport { ThemeContext as StyledThemeContext } from \"styled-components\";\nimport { ThemeContext } from \"contexts/ThemeContext\";\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeContext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { MenuEntry } from \"@plasmaswap/uikit\";\n\nconst config: MenuEntry[] = [\n  {\n    label: \"Home\",\n    icon: \"HomeIcon\",\n    href: \"/\",\n  },\n  {\n    label: \"Exchange\",\n    icon: \"ExchangeIcon\",\n    href: \"https://papersolution.github.io/#/swap\",\n  },\n  {\n    label: \"Liquidity\",\n    icon: \"LiquidityIcon\",\n    href: \"https://papersolution.github.io/#/pool\",\n  },\n  {\n    label: \"Farms\",\n    icon: \"FarmsIcon\",\n    href: \"/farms\",\n  },\n  {\n    label: \"Pools\",\n    icon: \"PoolsIcon\",\n    href: \"/pools\",\n  },\n  {\n    label: \"Games\",\n    icon: \"GamesIcon\",\n    items: [\n      {\n        label: \"Game 1\",\n        href: \"/games/evens-and-odds\",\n      },\n      {\n        label: \"Game 2\",\n        href: \"/games/prediction\",\n      },\n      {\n        label: \"Game 3\",\n        href: \"/games/lottery\",\n      }\n    ]\n  },\n  // {\n  //   label: \"Adoption Center\",\n  //   icon: \"AdoptionCenterIcon\",\n  //   href: \"/adoption-center\",\n  // },\n  {\n    label: \"Referrals\",\n    icon: \"ReferralsIcon\",\n    href: \"/referrals\",\n  },\n  {\n    label: \"Audits\",\n    icon: \"AuditsIcon\",\n    href: \"/audits\",\n  },\n  {\n    label: \"More\",\n    icon: \"MoreIcon\",\n    items: [\n      {\n        label: \"Github\",\n        href: \"https://github.com/plasmaswap\",\n      },\n      {\n        label: \"Docs\",\n        href: \"https://docs.plasmaswap.com\",\n      },\n      {\n        label: \"Blog\",\n        href: \"https://medium.com/@plasmaswap\",\n      },\n    ],\n  }\n];\n\nexport default config;\n","import React from \"react\";\nimport { Menu as UikitMenu } from \"@plasmaswap/uikit\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { languageList } from \"config/localization/languages\";\nimport { useTranslation } from \"contexts/Localization\";\nimport useTheme from \"hooks/useTheme\";\nimport useAuth from \"hooks/useAuth\";\nimport { usePriceCakeBusd } from \"state/hooks\";\nimport config from \"./config\";\n\nconst Menu = (props) => {\n  const { account } = useWeb3React()\n  const { login, logout } = useAuth()\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n  const { currentLanguage, setLanguage } = useTranslation()\n\n  return (\n    <UikitMenu\n      account={account}\n      login={login}\n      logout={logout}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={currentLanguage.code}\n      langs={languageList}\n      setLang={setLanguage}\n      cakePriceUsd={cakePriceUsd.toNumber()}\n      links={config}\n      {...props}\n    />\n  );\n};\n\nexport default Menu;\n","import React, { Suspense, SuspenseProps } from \"react\";\n\ninterface State {\n  hasError: boolean\n}\n\nclass SuspenseWithChunkError extends React.Component<SuspenseProps, State> {\n  constructor(props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  static getDerivedStateFromError() {\n    // Update the state so the next render will show the fallback UI\n    return { hasError: true }\n  }\n\n  componentDidCatch(error) {\n    const isJsChunkLoadError = error.name === \"ChunkLoadError\"\n    const isCssChunkLoadError = error.code === \"CSS_CHUNK_LOAD_FAILED\"\n    const isChunkLoadError = isJsChunkLoadError || isCssChunkLoadError\n\n    // Save a flag on the window object indicating that we have already had a chunk error\n    // This prevents infinite reloads\n    const isRecoveringFromChunkError = !!window.history.state?.isRecoveringFromChunkError\n\n    // If was a chunk load error, refresh the page\n    if (isChunkLoadError && !isRecoveringFromChunkError) {\n      const nextState = { ...window.history.state, isRecoveringFromChunkError: true }\n      window.history.replaceState(nextState, \"\")\n      window.location.reload()\n      return\n    }\n\n    throw error\n  }\n\n  render() {\n    const { hasError } = this.state\n    const { fallback } = this.props\n\n    if (hasError) {\n      return fallback\n    }\n\n    return <Suspense {...this.props} />\n  }\n}\n\nexport default SuspenseWithChunkError\n","import React from \"react\";\nimport { ToastContainer } from \"@plasmaswap/uikit\";\nimport useToast from \"hooks/useToast\";\n\nconst ToastListener = () => {\n  const { toasts, remove } = useToast()\n  const handleRemove = (id: string) => remove(id)\n  return <ToastContainer toasts={toasts} onRemove={handleRemove} />\n}\n\nexport default ToastListener\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Spinner } from \"@plasmaswap/uikit\";\nimport Page from \"./layout/Page\";\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, useRef } from \"react\";\nimport CountUp from \"react-countup\";\nimport { Text, TextProps } from \"@plasmaswap/uikit\";\n\ninterface BalanceProps extends TextProps {\n  value: number\n  decimals?: number\n  unit?: string\n  isDisabled?: boolean\n  prefix?: string\n}\n\nconst Balance: React.FC<BalanceProps> = ({\n  value,\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  ...props\n}) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n\n  const showPrefix = Boolean(value && prefix)\n  const showUnit = Boolean(value && unit)\n\n  return (\n    <Text color={isDisabled ? \"textDisabled\" : \"000000\"} {...props}>\n      {showPrefix && <span>{prefix}</span>}\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {showUnit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nexport default Balance\n","import React from 'react';\nimport { Flex, IconButton, useModal, CalculateIcon, Skeleton } from '@plasmaswap/uikit';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { getPoolApr } from 'utils/apr';\n// import { getAddress } from 'utils/addressHelpers';\n// import { useGetApiPrice } from 'state/hooks';\nimport Balance from 'components/Balance';\nimport ApyCalculatorModal from 'components/ApyCalculatorModal';\nimport { Pool } from 'state/types';\nimport { BASE_EXCHANGE_URL } from 'config';\n\ninterface AprRowProps {\n  pool: Pool\n  stakingTokenPrice: number\n  isAutoVault?: boolean\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst AprRow: React.FC<AprRowProps> = ({\n  pool,\n  stakingTokenPrice,\n  compoundFrequency = 1,\n  performanceFee = 0\n}) => {\n  const { stakingToken, earningToken, totalStaked, isFinished, tokenPerBlock } = pool;\n\n  // TODO: For testnets, set the price of all earning tokens to $0.01\n  // const earningTokenPrice = useGetApiPrice(earningToken.address ? getAddress(earningToken.address) : '');\n  const earningTokenPrice = 0.00000001;\n  // eslint-disable-next-line no-param-reassign\n  stakingTokenPrice = 0.01;\n\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0; // Special handling for high-value tokens where the daily rewards for $1000 will be less than 0.001 of that token\n\n  const apr = getPoolApr(\n    stakingTokenPrice,\n    earningTokenPrice,\n    getBalanceNumber(totalStaked, stakingToken.decimals),\n    parseFloat(tokenPerBlock),\n  );\n\n  const apyModalLink = stakingToken.address &&\n    `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${stakingToken.address[process.env.REACT_APP_CHAIN_ID]}`;\n\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      tokenPrice={earningTokenPrice}\n      apr={apr}\n      linkLabel={`Get ${stakingToken.symbol}`}\n      linkHref={apyModalLink || BASE_EXCHANGE_URL}\n      earningTokenSymbol={earningToken.symbol}\n      roundingDecimals={isHighValueToken ? 4 : 2}\n      compoundFrequency={compoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  );\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      APR:\n      {isFinished || !apr ? (\n        <Skeleton width=\"82px\" height=\"32px\" />\n      ) : (\n        <Flex alignItems=\"center\">\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n          <Balance\n            isDisabled={isFinished}\n            value={apr}\n            decimals={2}\n            unit=\"%\"\n          />\n        </Flex>\n      )}\n    </Flex>\n  );\n}\n\nexport default AprRow;\n","import styled, { css, keyframes } from 'styled-components'\nimport { Card, Box } from '@plasmaswap/uikit'\n\nconst PromotedGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nexport const StyledCard = styled(Card)<{ isPromotedPool?: boolean; isFinished?: boolean }>`\n  max-width: 352px;\n  margin: 0 8px 24px;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  border: 1px solid #65f5f7;\n\n  ${({ isPromotedPool, theme }) =>\n    isPromotedPool\n      ? css`\n          background: linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary});\n          padding: 1px 1px 3px 1px;\n          background-size: 400% 400%;\n          animation: ${PromotedGradient} 3s ease infinite;\n        `\n      : `background: ${(props) => props.theme.card.background};`}\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 12px 46px;\n  }\n`\n\nexport const StyledCardInner = styled(Box)<{ isPromotedPool?: boolean }>`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 8px;\n`\n\nexport default StyledCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, MetamaskIcon, Text, TooltipText, LinkExternal, TimerIcon, Skeleton, useTooltip, Button } from '@plasmaswap/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { useBlock, useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport Balance from 'components/Balance'\n\ninterface ExpandedFooterProps {\n  pool: Pool\n  account: string\n  isAutoVault?: boolean\n}\n\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account, isAutoVault = false }) => {\n  const { t } = useTranslation()\n  const { currentBlock } = useBlock()\n  const {\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const { stakingToken, earningToken, totalStaked, startBlock, endBlock, isFinished, contractAddress } = pool\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const imageSrc = `${BASE_URL}/images/tokens/${earningToken.symbol.toLowerCase()}.png`\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-end' },\n  )\n\n  const getTotalStakedBalance = () => {\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  return (\n    <ExpandedWrapper flexDirection=\"column\">\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small>{t('Total staked:')}</Text>\n        <Flex alignItems=\"flex-start\">\n          {totalStaked ? (\n            <>\n              <Balance fontSize=\"14px\" value={getTotalStakedBalance()} />\n              <Text ml=\"4px\" fontSize=\"14px\">\n                {stakingToken.symbol}\n              </Text>\n            </>\n          ) : (\n            <Skeleton width=\"90px\" height=\"21px\" />\n          )}\n        </Flex>\n      </Flex>\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('End') : t('Start')}:</Text>\n          <Flex alignItems=\"center\">\n            {blocksRemaining || blocksUntilStart ? (\n              <Balance\n                color=\"primary\"\n                fontSize=\"14px\"\n                value={hasPoolStarted ? blocksRemaining : blocksUntilStart}\n                decimals={0}\n              />\n            ) : (\n              <Skeleton width=\"54px\" height=\"21px\" />\n            )}\n            <Text ml=\"4px\" color=\"primary\" small>\n              {t('blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Flex>\n        </Flex>\n      )}\n      {isAutoVault && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          {tooltipVisible && tooltip}\n          <TooltipText ref={targetRef} small>\n            {t('Performance Fee')}\n          </TooltipText>\n          <Flex alignItems=\"center\">\n            <Text ml=\"4px\" small>\n              {performanceFee / 100}%\n            </Text>\n          </Flex>\n        </Flex>\n      )}\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal bold={false} small href={earningToken.projectLink}>\n          {t('View Project Site')}\n        </LinkExternal>\n      </Flex>\n      {poolContractAddress && (\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\n          <LinkExternal\n            bold={false}\n            small\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n          >\n            {t('View Contract')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {account && isMetaMaskInScope && tokenAddress && (\n        <Flex justifyContent=\"flex-end\">\n          <Button\n            variant=\"text\"\n            p=\"0\"\n            height=\"auto\"\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n          >\n            <Text color=\"primary\" fontSize=\"14px\">\n              Add to Metamask\n            </Text>\n            <MetamaskIcon ml=\"4px\" />\n          </Button>\n        </Flex>\n      )}\n    </ExpandedWrapper>\n  )\n}\n\nexport default React.memo(ExpandedFooter)\n","import React, { useState } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport styled from \"styled-components\";\nimport { Flex, CardFooter, ExpandableLabel } from \"@plasmaswap/uikit\";\nimport { Pool } from \"state/types\";\nimport ExpandedFooter from \"./ExpandedFooter\";\n\ninterface FooterProps {\n  pool: Pool\n  account: string\n  isAutoVault?: boolean\n  totalCakeInVault?: BigNumber\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`;\n\nconst Footer: React.FC<FooterProps> = ({ pool, account, isAutoVault = false }) => {\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  return (\n    <CardFooter>\n      <ExpandableButtonWrapper>\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? \"Hide\" : \"Details\"}\n        </ExpandableLabel>\n      </ExpandableButtonWrapper>\n      {isExpanded && <ExpandedFooter pool={pool} account={account} isAutoVault={isAutoVault} />}\n    </CardFooter>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport styled from \"styled-components\";\nimport { CardHeader, Heading, Tag, Text, Flex, Image } from \"@plasmaswap/uikit\";\n\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string; isPromotedPool?: boolean }>`\n  background: ${({ isFinished, background, theme }) =>\n    isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n  border-radius: 8px 8px 0 0;\n`;\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 12px;\n  color: black;\n  font-weight: bold;\n  border-radius: 16px;\n`;\n\nconst StyledCardHeader: React.FC<{\n  earningTokenSymbol: string\n  stakingTokenSymbol: string\n  isAutoVault?: boolean\n  isFinished?: boolean\n  isStaking?: boolean\n  isPromotedPool?: boolean\n  allocPoint?: string\n}> = ({\n  stakingTokenSymbol,\n  earningTokenSymbol,\n  isFinished = false,\n  isPromotedPool = false,\n  allocPoint,\n}) => {\n  const poolImageSrc = `${stakingTokenSymbol}-${earningTokenSymbol}.png`.toLocaleLowerCase();\n\n  const getSubHeading = () => {\n    return `Stake ${stakingTokenSymbol}, earn ${earningTokenSymbol}`;\n  };\n\n  const multiplier = `${new BigNumber(allocPoint).div(100).toString()}x`;\n\n  return (\n    <Wrapper isPromotedPool={isPromotedPool} isFinished={isFinished} background=\"cardHeader\">\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex flexDirection=\"column\">\n          <Heading color={isFinished ? \"textDisabled\" : \"body\"} scale=\"lg\">\n            <Flex>\n              <span>{`${stakingTokenSymbol} Pool`}</span>\n              <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n            </Flex>\n          </Heading>\n          <Text color={isFinished ? \"textDisabled\" : \"textSubtle\"}>{getSubHeading()}</Text>\n        </Flex>\n        <Image src={`/images/pools/${poolImageSrc}`} alt={earningTokenSymbol} width={64} height={64} />\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default StyledCardHeader;\n","import React, { useState, useCallback } from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@plasmaswap/uikit'\nimport { useSousApprove } from 'hooks/useApprove'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { getAddress } from 'utils/addressHelpers'\nimport { Pool } from 'state/types'\n\ninterface ApprovalActionProps {\n  pool: Pool\n  isLoading?: boolean\n}\n\nconst ApprovalAction: React.FC<ApprovalActionProps> = ({ pool, isLoading = false }) => {\n  const { sousId, stakingToken, earningToken } = pool\n  const { t } = useTranslation()\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { onApprove } = useSousApprove(stakingTokenContract, sousId)\n  const { toastSuccess, toastError } = useToast()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      if (txHash) {\n        toastSuccess(`${t('Contract Enabled')}`, `${t(`You can now stake in the ${earningToken.symbol} pool!`)}`)\n        setRequestedApproval(false)\n      } else {\n        // The user either rejected the transaction, or it didn't go through\n        toastError(\n          `${t('Error')}`,\n          `${t(`Please try again. Confirm the transaction and make sure you are paying enough gas!`)}`,\n        )\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError('Error', e?.message)\n    }\n  }, [onApprove, setRequestedApproval, toastSuccess, toastError, t, earningToken])\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default ApprovalAction\n","import React from \"react\";\nimport { Modal, Text, Button } from \"@plasmaswap/uikit\";\nimport { BASE_EXCHANGE_URL } from \"config\";\nimport useTheme from \"hooks/useTheme\";\n\ninterface NotEnoughTokensModalProps {\n  tokenSymbol: string\n  onDismiss?: () => void\n}\n\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\n  const { theme } = useTheme();\n\n  return (\n    <Modal\n      title={`${tokenSymbol} required`}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Text color=\"failure\" bold>\n        Insufficient { tokenSymbol } balance\n      </Text>\n      <Text mt=\"24px\">You&lsquo;ll need { tokenSymbol } to stake in this pool</Text>\n      <Text>\n        Buy some { tokenSymbol }, or make sure your { tokenSymbol } isn’t in another pool or LP\n      </Text>\n      <Button mt=\"24px\" as=\"a\" external href={BASE_EXCHANGE_URL}>\n        Buy {tokenSymbol}\n      </Button>\n      <Button variant=\"text\" onClick={onDismiss}>\n        Close window\n      </Button>\n    </Modal>\n  );\n};\n\nexport default NotEnoughTokensModal;\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from '@plasmaswap/uikit'\n\ninterface PercentageButtonProps {\n  onClick: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst PercentageButton: React.FC<PercentageButtonProps> = ({ children, onClick }) => {\n  return (\n    <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={onClick}>\n      {children}\n    </StyledButton>\n  )\n}\n\nexport default PercentageButton\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Image, Button, BalanceInput, AutoRenewIcon, Link } from '@plasmaswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useSousStake } from 'hooks/useStake'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport PercentageButton from './PercentageButton'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst StakeModal: React.FC<StakeModalProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss,\n}) => {\n  const { sousId, stakingToken, userData, stakingLimit, earningToken } = pool\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { onStake } = useSousStake(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId, pool.enableEmergencyWithdraw)\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\n  const [, setPercent] = useState(0)\n  const getCalculatedStakingLimit = () => {\n    if (isRemovingStake) {\n      return userData.stakedBalance\n    }\n\n    return stakingLimit.gt(0) && stakingTokenBalance.gt(stakingLimit) ? stakingLimit : stakingTokenBalance\n  }\n\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\n\n  useEffect(() => {\n    if (stakingLimit.gt(0) && !isRemovingStake) {\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\n    }\n  }, [stakeAmount, stakingLimit, userData, stakingToken, isRemovingStake, setHasReachedStakedLimit])\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\n      setPercent(Math.min(percentage, 100))\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true)\n\n    if (isRemovingStake) {\n      // unstaking\n      try {\n        await onUnstake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Unstaked')}!`,\n          t(`Your ${earningToken.symbol} earnings have also been harvested to your wallet!`),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    } else {\n      try {\n        // staking\n        await onStake(stakeAmount, stakingToken.decimals)\n        toastSuccess(`${t('Staked')}!`, t(`Your ${stakingToken.symbol} funds have been staked in the pool!`))\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stakingLimit.gt(0) && !isRemovingStake && (\n        <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\n          {t('Max stake for this pool: %amount% %token%', {\n            amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\n            token: stakingToken.symbol,\n          })}\n        </Text>\n      )}\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image src={`/images/tokens/${stakingToken.symbol}.png`} width={24} height={24} alt={stakingToken.symbol} />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={`~${usdValueStaked || 0} USD`}\n        isWarning={hasReachedStakeLimit}\n      />\n      {hasReachedStakeLimit && (\n        <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\n          {t('Maximum total stake: %amount% %token%', {\n            amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\n            token: stakingToken.symbol,\n          })}\n        </Text>\n      )}\n      <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"14px\" mt=\"4px\" mb=\"8px\">\n        Balance: {getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals)}\n      </Text>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(100)}>MAX</PercentageButton>\n      </Flex>\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <StyledLink external href={BASE_EXCHANGE_URL}>\n          <Button width=\"100%\" mt=\"8px\" variant=\"secondary\">\n            {t('Get')} {stakingToken.symbol}\n          </Button>\n        </StyledLink>\n      )}\n    </Modal>\n  )\n}\n\nexport default StakeModal\n","import React from \"react\";\nimport { Flex, Text, Button, IconButton, AddIcon, MinusIcon, useModal, Skeleton, useTooltip } from \"@plasmaswap/uikit\";\nimport BigNumber from \"bignumber.js\";\nimport { getBalanceNumber } from \"utils/formatBalance\";\nimport { Pool } from \"state/types\";\nimport Balance from \"components/Balance\";\nimport NotEnoughTokensModal from \"../Modals/NotEnoughTokensModal\";\nimport StakeModal from \"../Modals/StakeModal\";\n\ninterface StakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  stakedBalance: BigNumber\n  isBnbPool: boolean\n  isStaked: ConstrainBoolean\n  isLoading?: boolean\n}\n\nconst StakeAction: React.FC<StakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  stakedBalance,\n  isBnbPool,\n  isStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken, stakingLimit, isFinished, userData } = pool\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    \"You've already staked the maximum amount you can stake in this pool!\",\n    { placement: \"bottom\" },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  const renderStakeAction = () => {\n    return isStaked ? (\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <>\n            <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              <Balance\n                fontSize=\"12px\"\n                color=\"textSubtle\"\n                decimals={2}\n                value={stakedTokenDollarBalance}\n                prefix=\"~\"\n                unit=\" USD\"\n              />\n            </Text>\n          </>\n        </Flex>\n        <Flex>\n          <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n            <MinusIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n          {reachStakingLimit ? (\n            <span ref={targetRef}>\n              <IconButton variant=\"secondary\" disabled>\n                <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n              </IconButton>\n            </span>\n          ) : (\n            <IconButton\n              variant=\"secondary\"\n              onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n              disabled={isFinished}\n            >\n              <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n            </IconButton>\n          )}\n        </Flex>\n        {tooltipVisible && tooltip}\n      </Flex>\n    ) : (\n      <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n        Stake\n      </Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default StakeAction\n","import React, { useState } from \"react\";\nimport { Modal, Text, Button, Heading, Flex, AutoRenewIcon, ButtonMenu, ButtonMenuItem, HelpIcon, useTooltip } from \"@plasmaswap/uikit\";\nimport { useTranslation } from \"contexts/Localization\";\nimport useTheme from \"hooks/useTheme\";\nimport { useSousHarvest } from \"hooks/useHarvest\";\nimport { useSousStake } from \"hooks/useStake\";\nimport useToast from \"hooks/useToast\";\nimport { Token } from \"config/constants/types\";\n\ninterface CollectModalProps {\n  formattedBalance: string\n  fullBalance: string\n  earningToken: Token\n  earningsDollarValue: string\n  sousId: number\n  isBnbPool: boolean\n  isCompoundPool?: boolean\n  onDismiss?: () => void\n}\n\nconst CollectModal: React.FC<CollectModalProps> = ({\n  formattedBalance,\n  fullBalance,\n  earningToken,\n  earningsDollarValue,\n  sousId,\n  isBnbPool,\n  isCompoundPool = false,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\n  const { onStake } = useSousStake(sousId, isBnbPool)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [shouldCompound, setShouldCompound] = useState(isCompoundPool)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text mb=\"12px\">{t('Compound: collect and restake PLASMA into pool.')}</Text>\n      <Text>{t('Harvest: collect PLASMA and send to wallet')}</Text>\n    </>,\n    { placement: 'bottom-end', tooltipOffset: [20, 10] },\n  )\n\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n    // Compounding\n    if (shouldCompound) {\n      try {\n        await onStake(fullBalance, earningToken.decimals)\n        toastSuccess(\n          `${t('Compounded')}!`,\n          t(`Your ${earningToken.symbol} earnings have been re-invested into the pool!`),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    } else {\n      // Harvesting\n      try {\n        await onReward()\n        toastSuccess(`${t('Harvested')}!`, t(`Your ${earningToken.symbol} earnings have been sent to your wallet!`))\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  return (\n    <Modal\n      title={`${earningToken.symbol} ${isCompoundPool ? \"Collect\" : \"Harvest\"}`}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {isCompoundPool && (\n        <Flex justifyContent=\"center\" alignItems=\"center\" mb=\"24px\">\n          <ButtonMenu\n            activeIndex={shouldCompound ? 0 : 1}\n            scale=\"sm\"\n            variant=\"subtle\"\n            onItemClick={(index) => setShouldCompound(!index)}\n          >\n            <ButtonMenuItem as=\"button\">{t('Compound')}</ButtonMenuItem>\n            <ButtonMenuItem as=\"button\">{t('Harvest')}</ButtonMenuItem>\n          </ButtonMenu>\n          <Flex ml=\"10px\" ref={targetRef}>\n            <HelpIcon color=\"textSubtle\" />\n          </Flex>\n          {tooltipVisible && tooltip}\n        </Flex>\n      )}\n\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\n        <Text>{shouldCompound ? t('Compounding') : t('Harvesting')}:</Text>\n        <Flex flexDirection=\"column\">\n          <Heading>\n            {formattedBalance} {earningToken.symbol}\n          </Heading>\n          <Text fontSize=\"12px\" color=\"textSubtle\">{`~${earningsDollarValue || 0} USD`}</Text>\n        </Flex>\n      </Flex>\n\n      <Button\n        mt=\"8px\"\n        onClick={handleHarvestConfirm}\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      <Button variant=\"text\" onClick={onDismiss} pb=\"0px\">\n        {t('Close window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default CollectModal\n","/* eslint-disable no-nested-ternary */\nimport React from \"react\";\nimport { Flex, Text, Button, Heading, useModal, Skeleton } from \"@plasmaswap/uikit\";\nimport BigNumber from \"bignumber.js\";\nimport { Token } from \"config/constants/types\";\nimport { getAddress } from \"utils/addressHelpers\";\nimport { getFullDisplayBalance, getBalanceNumber, formatNumber } from \"utils/formatBalance\";\nimport { useGetApiPrice } from \"state/hooks\";\nimport Balance from \"components/Balance\";\nimport CollectModal from \"../Modals/CollectModal\";\n\ninterface HarvestActionsProps {\n  nextHarvest: number\n  earnings: BigNumber\n  earningToken: Token\n  sousId: number\n  isBnbPool: boolean\n  isLoading?: boolean\n}\n\nconst HarvestActions: React.FC<HarvestActionsProps> = ({ nextHarvest, earnings, earningToken, sousId, isBnbPool, isLoading = false }) => {\n  const earningTokenPrice = useGetApiPrice(earningToken.address ? getAddress(earningToken.address) : \"\");\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals);\n  const earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals);\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals);\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3);\n  const earningsDollarValue = formatNumber(earningTokenDollarBalance);\n  const hasEarnings = earnings.toNumber() > 0;\n  const isCompoundPool = sousId === 0;\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningsDollarValue}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isCompoundPool}\n    />,\n  );\n\n  const now = Math.round(Date.now() / 1000) - 30;\n  const secondsRemaining = nextHarvest - now;\n  const canHarvest = (secondsRemaining <= 0);\n  const minutesRemaining = ((Math.ceil(secondsRemaining / 60) > 119) ? 119 : Math.ceil(secondsRemaining / 60));\n  const lockupString = `Lockup: ${minutesRemaining} min${(minutesRemaining > 1) ? \"s\" : \"\"}`;\n\n  return (\n    <Flex flexDirection=\"column\" mb=\"16px\">\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          {isLoading ? (\n            <Skeleton width=\"80px\" height=\"48px\" />\n          ) : (\n            <>\n              {hasEarnings ? (\n                <Balance bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\n              ) : (\n                <Heading color=\"white\">0</Heading>\n              )}\n              <Text fontSize=\"12px\" color=\"#51a997\">\n                ~\n                {hasEarnings ? (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color=\"textSubtle\"\n                    decimals={2}\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                  />\n                ) : (\n                  \"0 USD\"\n                )}\n              </Text>\n            </>\n          )}\n        </Flex>\n        <Flex>\n          <Button disabled={!hasEarnings || !canHarvest || nextHarvest === 0} onClick={onPresentCollect}>\n            {canHarvest ? (isCompoundPool ? \"Collect\" : \"Harvest\") : lockupString}\n          </Button>\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default HarvestActions;\n","import BigNumber from \"bignumber.js\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { BIG_ZERO } from \"utils/bigNumber\";\nimport { Flex, Text, Box } from \"@plasmaswap/uikit\";\nimport { PoolCategory } from \"config/constants/types\";\nimport { Pool } from \"state/types\";\nimport ApprovalAction from \"./ApprovalAction\";\nimport StakeActions from \"./StakeActions\";\nimport HarvestActions from \"./HarvestActions\";\n\nconst InlineText = styled(Text)`\n  display: inline;\n`;\n\ninterface CardActionsProps {\n  pool: Pool\n  stakedBalance: BigNumber\n  stakingTokenPrice: number\n}\n\nconst CardActions: React.FC<CardActionsProps> = ({ pool, stakedBalance, stakingTokenPrice }) => {\n  const { sousId, stakingToken, earningToken, harvest, poolCategory, userData } = pool;\n  const isBnbPool = poolCategory === PoolCategory.BINANCE;\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO;\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO;\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO;\n  const needsApproval = !allowance.gt(0) && !isBnbPool;\n  const isStaked = stakedBalance.gt(0);\n  const isLoading = !userData;\n  const nextHarvest = pool.userData.nextHarvest.toNumber();\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        {harvest && (\n          <>\n            <Box display=\"inline\">\n              <InlineText color=\"secondary\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                {`${earningToken.symbol} `}\n              </InlineText>\n              <InlineText color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                earned\n              </InlineText>\n            </Box>\n            <HarvestActions\n              nextHarvest={nextHarvest}\n              earnings={earnings}\n              earningToken={earningToken}\n              sousId={sousId}\n              isBnbPool={isBnbPool}\n              isLoading={isLoading}\n            />\n          </>\n        )}\n        <Box display=\"inline\">\n          <InlineText color={isStaked ? \"secondary\" : \"textSubtle\"} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? stakingToken.symbol : \"stake\"}{\" \"}\n          </InlineText>\n          <InlineText color={isStaked ? \"textSubtle\" : \"secondary\"} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? \"staked\" : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {needsApproval ? (\n          <ApprovalAction pool={pool} isLoading={isLoading} />\n        ) : (\n          <StakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            stakingTokenPrice={stakingTokenPrice}\n            stakedBalance={stakedBalance}\n            isBnbPool={isBnbPool}\n            isStaked={isStaked}\n          />\n        )}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default CardActions;\n","import BigNumber from \"bignumber.js\";\nimport React from \"react\";\nimport { CardBody, Flex, Text, CardRibbon, HelpIcon, useTooltip } from \"@plasmaswap/uikit\";\nimport UnlockButton from \"components/UnlockButton\";\nimport { getAddress } from \"utils/addressHelpers\";\nimport { BIG_ZERO } from \"utils/bigNumber\";\nimport { useGetApiPrice } from \"state/hooks\";\nimport { Pool } from \"state/types\";\nimport styled from \"styled-components\";\nimport AprRow from \"./AprRow\";\nimport { StyledCard, StyledCardInner } from \"./StyledCard\";\nimport CardFooter from \"./CardFooter\";\nimport StyledCardHeader from \"./StyledCardHeader\";\nimport CardActions from \"./CardActions\";\n\nconst HarvestLockupRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Col1 = styled.div`\n  display: flex;\n`;\n\nconst Col2 = styled.div`\n  display: flex;\n`;\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`;\n\nconst PoolCard: React.FC<{ pool: Pool; account: string }> = ({ pool, account }) => {\n  const { allocPoint, sousId, stakingToken, earningToken, isFinished, userData } = pool;\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO;\n  const accountHasStakedBalance = stakedBalance.gt(0);\n  const stakingTokenPrice = useGetApiPrice(stakingToken.address ? getAddress(stakingToken.address) : \"\");\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    \"How long you must wait until you are able to harvest again\",\n    { placement: \"top\", tooltipOffset: [0, 10] },\n  );\n\n  return (\n    <StyledCard\n      isFinished={isFinished && sousId !== 0}\n      ribbon={isFinished && <CardRibbon variantColor=\"textDisabled\" text=\"Finished\" />}\n    >\n      <StyledCardInner>\n        <StyledCardHeader\n          isStaking={accountHasStakedBalance}\n          earningTokenSymbol={earningToken.symbol}\n          stakingTokenSymbol={stakingToken.symbol}\n          isFinished={isFinished && sousId !== 0}\n          allocPoint={allocPoint}\n        />\n\n        <CardBody>\n          <AprRow pool={pool} stakingTokenPrice={stakingTokenPrice} />\n\n          <HarvestLockupRow>\n            <Col1>\n              Harvest Lockup:\n            </Col1>\n            <Col2>\n              <ReferenceElement ref={targetRef}>\n                <HelpIcon color=\"textSubtle\" />\n              </ReferenceElement>\n              {tooltipVisible && tooltip}\n              {pool.harvestLockup}\n            </Col2>\n          </HarvestLockupRow>\n\n          <Flex mt=\"24px\" flexDirection=\"column\">\n            {account ? (\n              <CardActions pool={pool} stakedBalance={stakedBalance} stakingTokenPrice={stakingTokenPrice} />\n            ) : (\n              <>\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                  Start earning\n                </Text>\n                <UnlockButton />\n              </>\n            )}\n          </Flex>\n        </CardBody>\n        <CardFooter pool={pool} account={account} />\n      </StyledCardInner>\n    </StyledCard>\n  );\n};\n\nexport default PoolCard;\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Button, HelpIcon, Toggle, Text, Flex, NotificationDot, Link as UiKitLink } from '@plasmaswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ButtonText = styled(Text)`\n  display: none;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: block;\n  }\n`\n\nconst StyledLink = styled(UiKitLink)`\n  width: 100%;\n\n  &:hover {\n    text-decoration: none;\n  }\n`\n\nconst PoolTabButtons = ({ stakedOnly, setStakedOnly, hasStakeInFinishedPools }) => {\n  const { url, isExact } = useRouteMatch()\n  const { t } = useTranslation()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"32px\">\n      <Flex alignItems=\"center\" flexDirection={['column', null, 'row', null]}>\n        <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\">\n          <ButtonMenuItem as={Link} to={`${url}`}>\n            {t('Live')}\n          </ButtonMenuItem>\n          <NotificationDot show={hasStakeInFinishedPools}>\n            <ButtonMenuItem as={Link} to={`${url}/history`}>\n              {t('Finished')}\n            </ButtonMenuItem>\n          </NotificationDot>\n        </ButtonMenu>\n        <Flex mt={['4px', null, 0, null]} ml={[0, null, '24px', null]} justifyContent=\"center\" alignItems=\"center\">\n          <Toggle scale=\"sm\" checked={stakedOnly} onChange={() => setStakedOnly((prev) => !prev)} />\n          <Text ml=\"8px\">{t('Staked only')}</Text>\n        </Flex>\n      </Flex>\n      <Flex ml=\"24px\" alignItems=\"center\" justifyContent=\"flex-end\">\n        <StyledLink external href=\"https://docs.plasmaswap.com/\">\n          <Button px={['14px', null, null, null, '20px']} variant=\"subtle\">\n            <ButtonText color=\"backgroundAlt\" bold fontSize=\"16px\">\n              {t('Help')}\n            </ButtonText>\n            <HelpIcon color=\"backgroundAlt\" ml={[null, null, null, 0, '6px']} />\n          </Button>\n        </StyledLink>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default PoolTabButtons\n","import React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport { Route, useRouteMatch } from \"react-router-dom\";\nimport BigNumber from \"bignumber.js\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Heading, Flex } from \"@plasmaswap/uikit\";\nimport orderBy from \"lodash/orderBy\";\nimport partition from \"lodash/partition\";\nimport usePersistState from \"hooks/usePersistState\";\nimport { usePools, useBlock, useFetchCakeVault } from \"state/hooks\";\nimport FlexLayout from \"components/layout/Flex\";\nimport Page from \"components/layout/Page\";\nimport PageHeader from \"components/PageHeader\";\nimport PoolCard from \"./components/PoolCard\";\nimport PoolTabButtons from \"./components/PoolTabButtons\";\n\nconst NUMBER_OF_POOLS_VISIBLE = 12\n\nconst Pools: React.FC = () => {\n  useFetchCakeVault();\n  const { path } = useRouteMatch();\n  const { account } = useWeb3React();\n  const pools = usePools(account);\n  const { currentBlock } = useBlock();\n  const [stakedOnly, setStakedOnly] = usePersistState(false, \"pancake_pool_staked\");\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE);\n  const [observerIsSet, setObserverIsSet] = useState(false);\n  const loadMoreRef = useRef<HTMLDivElement>(null);\n\n  const [finishedPools, openPools] = useMemo(\n    () => partition(pools, (pool) => pool.isFinished || currentBlock > pool.endBlock),\n    [currentBlock, pools],\n  );\n\n  const stakedOnlyFinishedPools = useMemo(\n    () => finishedPools.filter((pool) => pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)),\n    [finishedPools],\n  );\n\n  const stakedOnlyOpenPools = useMemo(\n    () => openPools.filter((pool) => pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)),\n    [openPools],\n  );\n\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0;\n\n  useEffect(() => {\n    const showMorePools = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfPoolsVisible((poolsCurrentlyVisible) => poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\n        rootMargin: \"0px\",\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet]);\n\n  return (\n    <>\n      <PageHeader>\n        <Flex justifyContent=\"space-between\" flexDirection={[\"column\", null, \"row\"]}>\n          <Flex flexDirection=\"column\" mr={[\"8px\", 0]}>\n            <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n              Pools\n            </Heading>\n            <Heading scale=\"md\" color=\"text\">\n              Stake various tokens in Plasma&lsquo;s pools to passively earn PLASMA\n            </Heading>\n          </Flex>\n        </Flex>\n      </PageHeader>\n      <Page>\n        <PoolTabButtons\n          stakedOnly={stakedOnly}\n          setStakedOnly={setStakedOnly}\n          hasStakeInFinishedPools={hasStakeInFinishedPools}\n        />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            <>\n              {stakedOnly\n                ? orderBy(stakedOnlyOpenPools, [\"sortOrder\"])\n                    .slice(0, numberOfPoolsVisible)\n                    .map((pool) => <PoolCard key={pool.sousId} pool={pool} account={account} />)\n                : orderBy(openPools, [\"sortOrder\"])\n                    .slice(0, numberOfPoolsVisible)\n                    .map((pool) => <PoolCard key={pool.sousId} pool={pool} account={account} />)}\n            </>\n          </Route>\n          <Route path={`${path}/history`}>\n            {stakedOnly\n              ? orderBy(stakedOnlyFinishedPools, [\"sortOrder\"])\n                  .slice(0, numberOfPoolsVisible)\n                  .map((pool) => <PoolCard key={pool.sousId} pool={pool} account={account} />)\n              : orderBy(finishedPools, [\"sortOrder\"])\n                  .slice(0, numberOfPoolsVisible)\n                  .map((pool) => <PoolCard key={pool.sousId} pool={pool} account={account} />)}\n          </Route>\n        </FlexLayout>\n        <div ref={loadMoreRef} />\n      </Page>\n    </>\n  );\n};\n\nexport default Pools;\n","import React, { lazy } from \"react\";\nimport { Route, Switch, HashRouter } from \"react-router-dom\";\nimport { ResetCSS } from \"@plasmaswap/uikit\";\nimport BigNumber from \"bignumber.js\";\nimport useEagerConnect from \"hooks/useEagerConnect\";\nimport { useFetchPriceList, useFetchProfile, useFetchPublicData } from \"state/hooks\";\nimport queryString from \"query-string\";\nimport { useCookies } from \"react-cookie\";\nimport Web3 from \"web3\";\nimport GlobalStyle from \"./style/Global\";\nimport Menu from \"./components/Menu\";\nimport SuspenseWithChunkError from \"./components/SuspenseWithChunkError\";\nimport ToastListener from \"./components/ToastListener\";\nimport PageLoader from \"./components/PageLoader\";\nimport Pools from \"./views/Pools\";\n\n// Route-based code splitting, no pool here because it's included in the main bundle (it's the most visited page)\nconst Home           = lazy(() => import(\"./views/Home\"));\nconst Farms          = lazy(() => import(\"./views/Farms\"));\nconst EvensAndOdds   = lazy(() => import(\"./views/Games/EvensAndOdds\"));\nconst Prediction     = lazy(() => import(\"./views/Games/Prediction\"));\nconst Lottery        = lazy(() => import(\"./views/Games/Lottery\"));\n// const AdoptionCenter = lazy(() => import(\"./views/AdoptionCenter\"));\nconst Referrals      = lazy(() => import(\"./views/Referrals\"));\nconst Audits         = lazy(() => import(\"./views/Audits\"));\nconst NotFound       = lazy(() => import(\"./views/NotFound\"));\n\n// This config is required for number formatting\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n});\n\nconst App: React.FC = () => {\n  useEagerConnect();\n  useFetchPublicData();\n  useFetchProfile();\n  useFetchPriceList();\n\n  const getParams = queryString.parse(window.location.search);\n  const [, setCookie, removeCookie] = useCookies([\"refer\"]);\n\n  if (\"refer\" in getParams) {\n    // Get the referal address from the parameter\n    let referralAddress = getParams.refer as string;\n\n    // Prepend 0x to the address since it will not contain it\n    referralAddress = `0x${referralAddress}`;\n\n    // Validate the address\n    const isValidAddress = Web3.utils.isAddress(referralAddress);\n\n    // Set a referral cookie if it's a good address, and remove it if it's a bad address\n    if (isValidAddress) {\n      setCookie(\"refer\", referralAddress, {\n        path: \"/\",\n        expires: new Date(Date.now() + 2592000)\n      });\n    } else {\n      removeCookie(\"refer\");\n    }\n\n    // Redirect to the homepage in order to remove the param\n    window.location.href = \"https://plasticsolutionsllc.github.io/\";\n  }\n\n  return (\n    <HashRouter>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <SuspenseWithChunkError fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/pools\">\n              <Pools />\n            </Route>\n            <Route path=\"/games/evens-and-odds\">\n              <EvensAndOdds />\n            </Route>\n            <Route path=\"/games/prediction\">\n              <Prediction />\n            </Route>\n            <Route path=\"/games/lottery\">\n              <Lottery />\n            </Route>\n            {/* <Route path=\"/adoption-center\">\n              <AdoptionCenter />\n            </Route> */}\n            <Route path=\"/referrals\">\n              <Referrals />\n            </Route>\n            <Route path=\"/audits\">\n              <Audits />\n            </Route>\n            <Route component={NotFound} />\n          </Switch>\n        </SuspenseWithChunkError>\n      </Menu>\n      <ToastListener />\n    </HashRouter>\n  );\n};\n\nexport default React.memo(App);\n","import React from \"react\";\nimport { ModalProvider } from \"@plasmaswap/uikit\";\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { Provider } from \"react-redux\";\nimport { getLibrary } from \"utils/web3React\";\nimport { ThemeContextProvider } from \"contexts/ThemeContext\";\nimport { LanguageProvider } from \"contexts/Localization\";\nimport { RefreshContextProvider } from \"contexts/RefreshContext\";\nimport { ToastsProvider } from \"contexts/ToastsContext\";\nimport store from \"state\";\n\nconst Providers: React.FC = ({ children }) => {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <Provider store={store}>\n        <ToastsProvider>\n          <HelmetProvider>\n            <ThemeContextProvider>\n              <LanguageProvider>\n                <RefreshContextProvider>\n                  <ModalProvider>{children}</ModalProvider>\n                </RefreshContextProvider>\n              </LanguageProvider>\n            </ThemeContextProvider>\n          </HelmetProvider>\n        </ToastsProvider>\n      </Provider>\n    </Web3ReactProvider>\n  )\n}\n\nexport default Providers;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport Providers from \"./Providers\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n","import { Profile } from \"state/types\";\n\nexport type ProfileResponse = {\n  0: string\n  1: string\n  2: string\n  3: string\n  4: string\n  5: boolean\n}\n\nexport const transformProfileResponse = (profileResponse: ProfileResponse): Partial<Profile> => {\n  const { 0: userId, 1: numberPoints, 2: teamId, 3: nftAddress, 4: tokenId, 5: isActive } = profileResponse\n\n  return {\n    userId: Number(userId),\n    points: Number(numberPoints),\n    teamId: Number(teamId),\n    tokenId: Number(tokenId),\n    nftAddress,\n    isActive,\n  }\n}\n","import Cookies from \"js-cookie\";\nimport { getProfileContract } from \"utils/contractHelpers\";\nimport { Profile } from \"state/types\";\nimport { transformProfileResponse } from \"./helpers\";\n\nconst profileContract = getProfileContract()\nconst profileApi = process.env.REACT_APP_API_PROFILE\n\nexport interface GetProfileResponse {\n  hasRegistered: boolean\n  profile?: Profile\n}\n\nconst getUsername = async (address: string): Promise<string> => {\n  try {\n    const response = await fetch(`${profileApi}/api/users/${address}`)\n\n    if (!response.ok) {\n      return \"\"\n    }\n\n    const { username = \"\" } = await response.json()\n\n    return username\n  } catch (error) {\n    return \"\"\n  }\n}\n\nconst getProfile = async (address: string): Promise<GetProfileResponse> => {\n  try {\n    const hasRegistered = (await profileContract.methods.hasRegistered(address).call()) as boolean\n\n    if (!hasRegistered) {\n      return { hasRegistered, profile: null }\n    }\n\n    const profileResponse = await profileContract.methods.getUserProfile(address).call()\n    const { userId, points, teamId, tokenId, nftAddress, isActive } = transformProfileResponse(profileResponse)\n    const username = await getUsername(address)\n\n    if (isActive) {\n      // Save the preview image in a cookie so it can be used on the exchange\n      Cookies.set(\n        `profile_${address}`,\n        {\n          username,\n          avatar: `https://plasticsolutionsllc.github.io/`,\n        },\n        { domain: \"plasticsolutionsllc.github.io\", secure: true, expires: 30 },\n      )\n    }\n\n    const profile = {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      username,\n      nftAddress,\n      isActive,\n    } as Profile\n\n    return { hasRegistered, profile }\n  } catch (error) {\n    return null\n  }\n}\n\nexport default getProfile\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ProfileState } from \"state/types\";\nimport type { AppDispatch } from \"state\";\nimport getProfile, { GetProfileResponse } from \"./getProfile\";\n\nconst initialState: ProfileState = {\n  isInitialized: false,\n  isLoading: true,\n  hasRegistered: false,\n  data: null,\n}\n\nexport const profileSlice = createSlice({\n  name: \"profile\",\n  initialState,\n  reducers: {\n    profileFetchStart: (state) => {\n      state.isLoading = true\n    },\n    profileFetchSucceeded: (_state, action: PayloadAction<GetProfileResponse>) => {\n      const { profile, hasRegistered } = action.payload\n\n      return {\n        isInitialized: true,\n        isLoading: false,\n        hasRegistered,\n        data: profile,\n      }\n    },\n    profileFetchFailed: (state) => {\n      state.isLoading = false\n      state.isInitialized = true\n    },\n    profileClear: () => ({\n      ...initialState,\n      isLoading: false,\n    }),\n    addPoints: (state, action: PayloadAction<number>) => {\n      state.data.points += action.payload\n    },\n  },\n})\n\n// Actions\nexport const { profileFetchStart, profileFetchSucceeded, profileFetchFailed, profileClear, addPoints } =\n  profileSlice.actions\n\n// Thunks\nexport const fetchProfile = (address: string) => async (dispatch: AppDispatch) => {\n  try {\n    dispatch(profileFetchStart())\n    const response = await getProfile(address)\n    dispatch(profileFetchSucceeded(response))\n  } catch (error) {\n    dispatch(profileFetchFailed())\n  }\n}\n\nexport default profileSlice.reducer\n","import { useContext } from \"react\";\nimport { ToastsContext } from \"contexts/ToastsContext\";\n\nconst useToast = () => {\n  const toastContext = useContext(ToastsContext)\n\n  if (toastContext === undefined) {\n    throw new Error(\"Toasts context undefined\")\n  }\n\n  return toastContext\n}\n\nexport default useToast\n","import { TranslatableText } from \"state/types\"\n\nexport interface Address {\n  56: string    // BSC Mainnet\n  97?: string   // BSC Testnet\n  137?: string  // MATIC Mainnet\n  80001?: string // MATIC Testnet\n}\n\nexport interface Token {\n  symbol: string\n  address?: Address\n  decimals?: number\n  projectLink?: string\n}\n\nexport enum PoolIds {\n  poolBasic = \"poolBasic\",\n  poolUnlimited = \"poolUnlimited\",\n}\n\nexport type IfoStatus = \"idle\" | \"coming_soon\" | \"live\" | \"finished\"\n\ninterface IfoPoolInfo {\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  distributionRatio: number // Range [0-1]\n}\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  currency: Token\n  token: Token\n  releaseBlockNumber: number\n  articleUrl: string\n  campaignId: string\n  tokenOfferingPrice: number\n  isV1: boolean\n  [PoolIds.poolBasic]?: IfoPoolInfo\n  [PoolIds.poolUnlimited]: IfoPoolInfo\n}\n\nexport enum PoolCategory {\n  \"COMMUNITY\" = \"Community\",\n  \"CORE\" = \"Core\",\n  \"BINANCE\" = \"Binance\", // Pools using native BNB behave differently than pools using a token\n  \"AUTO\" = \"Auto\",\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  harvestLockup: string\n  lpAddresses: Address\n  token: Token\n  quoteToken: Token\n  multiplier?: string\n  isCommunity?: boolean\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  earningToken: Token\n  stakingToken: Token\n  harvestLockup: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  enableEmergencyWithdraw?: boolean\n}\n\nexport type Images = {\n  lg: string\n  md: string\n  sm: string\n  ipfs?: string\n}\n\nexport type NftImages = {\n  blur?: string\n} & Images\n\nexport type NftVideo = {\n  webm: string\n  mp4: string\n}\n\nexport type NftSource = {\n  [key in NftType]: {\n    address: Address\n    identifierKey: string\n  }\n}\n\nexport enum NftType {\n  PANCAKE = \"pancake\",\n  MIXIE = \"mixie\",\n}\n\nexport type Nft = {\n  description: string\n  name: string\n  images: NftImages\n  sortOrder: number\n  type: NftType\n  video?: NftVideo\n  identifier: string\n  variationId?: number | string\n}\n\nexport type TeamImages = {\n  alt: string\n} & Images\n\nexport type Team = {\n  id: number\n  name: string\n  description: string\n  isJoinable?: boolean\n  users: number\n  points: number\n  images: TeamImages\n  background: string\n  textColor: string\n}\n\nexport type CampaignType = \"ifo\" | \"teambattle\"\n\nexport type Campaign = {\n  id: string\n  type: CampaignType\n  title?: TranslatableText\n  description?: TranslatableText\n  badge?: string\n}\n\nexport type PageMeta = {\n  title: string\n  description?: string\n  image?: string\n}\n"],"sourceRoot":""}